//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TradeType = {
'NONE' : 0,
'REAL' : 1,
'SIM' : 2
};
HostingServiceState = {
'WAITING' : 0,
'OPENING' : 1,
'UPGRADING' : 2,
'WORKING' : 3,
'EXPIRED' : 4,
'RELEASED' : 5,
'UNKNOWN' : 6
};
CompanyServiceMaintenance = function(args) {
  this.companyId = null;
  this.companyName = null;
  this.versionTag = null;
  this.maintenanceTimeSpans = null;
  this.maintenanceState = null;
  this.versionDifferent = null;
  this.companyCode = null;
  this.keepLatest = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.companyName !== undefined) {
      this.companyName = args.companyName;
    }
    if (args.versionTag !== undefined) {
      this.versionTag = args.versionTag;
    }
    if (args.maintenanceTimeSpans !== undefined) {
      this.maintenanceTimeSpans = args.maintenanceTimeSpans;
    }
    if (args.maintenanceState !== undefined) {
      this.maintenanceState = args.maintenanceState;
    }
    if (args.versionDifferent !== undefined) {
      this.versionDifferent = args.versionDifferent;
    }
    if (args.companyCode !== undefined) {
      this.companyCode = args.companyCode;
    }
    if (args.keepLatest !== undefined) {
      this.keepLatest = args.keepLatest;
    }
  }
};
CompanyServiceMaintenance.prototype = {};
CompanyServiceMaintenance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.maintenanceTimeSpans = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.maintenanceTimeSpans.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maintenanceState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.versionDifferent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.companyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLatest = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyServiceMaintenance.prototype.write = function(output) {
  output.writeStructBegin('CompanyServiceMaintenance');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 3);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.maintenanceTimeSpans !== null && this.maintenanceTimeSpans !== undefined) {
    output.writeFieldBegin('maintenanceTimeSpans', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.maintenanceTimeSpans.length);
    for (var iter7 in this.maintenanceTimeSpans)
    {
      if (this.maintenanceTimeSpans.hasOwnProperty(iter7))
      {
        iter7 = this.maintenanceTimeSpans[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.maintenanceState !== null && this.maintenanceState !== undefined) {
    output.writeFieldBegin('maintenanceState', Thrift.Type.I32, 5);
    output.writeI32(this.maintenanceState);
    output.writeFieldEnd();
  }
  if (this.versionDifferent !== null && this.versionDifferent !== undefined) {
    output.writeFieldBegin('versionDifferent', Thrift.Type.BOOL, 6);
    output.writeBool(this.versionDifferent);
    output.writeFieldEnd();
  }
  if (this.companyCode !== null && this.companyCode !== undefined) {
    output.writeFieldBegin('companyCode', Thrift.Type.STRING, 7);
    output.writeString(this.companyCode);
    output.writeFieldEnd();
  }
  if (this.keepLatest !== null && this.keepLatest !== undefined) {
    output.writeFieldBegin('keepLatest', Thrift.Type.BOOL, 8);
    output.writeBool(this.keepLatest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompanyGroupServiceDetail = function(args) {
  this.groupId = null;
  this.groupName = null;
  this.tradeType = null;
  this.versionTag = null;
  this.hostingServiceState = null;
  if (args) {
    if (args.groupId !== undefined) {
      this.groupId = args.groupId;
    }
    if (args.groupName !== undefined) {
      this.groupName = args.groupName;
    }
    if (args.tradeType !== undefined) {
      this.tradeType = args.tradeType;
    }
    if (args.versionTag !== undefined) {
      this.versionTag = args.versionTag;
    }
    if (args.hostingServiceState !== undefined) {
      this.hostingServiceState = args.hostingServiceState;
    }
  }
};
CompanyGroupServiceDetail.prototype = {};
CompanyGroupServiceDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.groupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.groupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.tradeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.hostingServiceState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyGroupServiceDetail.prototype.write = function(output) {
  output.writeStructBegin('CompanyGroupServiceDetail');
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I64, 1);
    output.writeI64(this.groupId);
    output.writeFieldEnd();
  }
  if (this.groupName !== null && this.groupName !== undefined) {
    output.writeFieldBegin('groupName', Thrift.Type.STRING, 2);
    output.writeString(this.groupName);
    output.writeFieldEnd();
  }
  if (this.tradeType !== null && this.tradeType !== undefined) {
    output.writeFieldBegin('tradeType', Thrift.Type.I32, 3);
    output.writeI32(this.tradeType);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 4);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.hostingServiceState !== null && this.hostingServiceState !== undefined) {
    output.writeFieldBegin('hostingServiceState', Thrift.Type.I32, 5);
    output.writeI32(this.hostingServiceState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MaintenanceScheduleDetail = function(args) {
  this.companyId = null;
  this.companyName = null;
  this.operateType = null;
  this.oldVersionTag = null;
  this.targetVersionTag = null;
  this.maintenanceTimeSpans = null;
  this.createScheduleTime = null;
  this.scheduleMaintenanceTime = null;
  this.creater = null;
  this.companyCode = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.companyName !== undefined) {
      this.companyName = args.companyName;
    }
    if (args.operateType !== undefined) {
      this.operateType = args.operateType;
    }
    if (args.oldVersionTag !== undefined) {
      this.oldVersionTag = args.oldVersionTag;
    }
    if (args.targetVersionTag !== undefined) {
      this.targetVersionTag = args.targetVersionTag;
    }
    if (args.maintenanceTimeSpans !== undefined) {
      this.maintenanceTimeSpans = args.maintenanceTimeSpans;
    }
    if (args.createScheduleTime !== undefined) {
      this.createScheduleTime = args.createScheduleTime;
    }
    if (args.scheduleMaintenanceTime !== undefined) {
      this.scheduleMaintenanceTime = args.scheduleMaintenanceTime;
    }
    if (args.creater !== undefined) {
      this.creater = args.creater;
    }
    if (args.companyCode !== undefined) {
      this.companyCode = args.companyCode;
    }
  }
};
MaintenanceScheduleDetail.prototype = {};
MaintenanceScheduleDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.operateType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.oldVersionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.targetVersionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size8 = 0;
        var _rtmp312;
        this.maintenanceTimeSpans = [];
        var _etype11 = 0;
        _rtmp312 = input.readSetBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32().value;
          this.maintenanceTimeSpans.push(elem14);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createScheduleTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.scheduleMaintenanceTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.creater = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.companyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaintenanceScheduleDetail.prototype.write = function(output) {
  output.writeStructBegin('MaintenanceScheduleDetail');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 2);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.operateType !== null && this.operateType !== undefined) {
    output.writeFieldBegin('operateType', Thrift.Type.I32, 3);
    output.writeI32(this.operateType);
    output.writeFieldEnd();
  }
  if (this.oldVersionTag !== null && this.oldVersionTag !== undefined) {
    output.writeFieldBegin('oldVersionTag', Thrift.Type.STRING, 4);
    output.writeString(this.oldVersionTag);
    output.writeFieldEnd();
  }
  if (this.targetVersionTag !== null && this.targetVersionTag !== undefined) {
    output.writeFieldBegin('targetVersionTag', Thrift.Type.STRING, 5);
    output.writeString(this.targetVersionTag);
    output.writeFieldEnd();
  }
  if (this.maintenanceTimeSpans !== null && this.maintenanceTimeSpans !== undefined) {
    output.writeFieldBegin('maintenanceTimeSpans', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.I32, this.maintenanceTimeSpans.length);
    for (var iter15 in this.maintenanceTimeSpans)
    {
      if (this.maintenanceTimeSpans.hasOwnProperty(iter15))
      {
        iter15 = this.maintenanceTimeSpans[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.createScheduleTime !== null && this.createScheduleTime !== undefined) {
    output.writeFieldBegin('createScheduleTime', Thrift.Type.I64, 7);
    output.writeI64(this.createScheduleTime);
    output.writeFieldEnd();
  }
  if (this.scheduleMaintenanceTime !== null && this.scheduleMaintenanceTime !== undefined) {
    output.writeFieldBegin('scheduleMaintenanceTime', Thrift.Type.I64, 8);
    output.writeI64(this.scheduleMaintenanceTime);
    output.writeFieldEnd();
  }
  if (this.creater !== null && this.creater !== undefined) {
    output.writeFieldBegin('creater', Thrift.Type.STRING, 9);
    output.writeString(this.creater);
    output.writeFieldEnd();
  }
  if (this.companyCode !== null && this.companyCode !== undefined) {
    output.writeFieldBegin('companyCode', Thrift.Type.STRING, 10);
    output.writeString(this.companyCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompanyServiceMaintenanceFilter = function(args) {
  this.companyId = null;
  this.companyNamePartical = null;
  this.versionTag = null;
  this.maintenanceTimeSpan = null;
  this.maintenanceState = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.companyNamePartical !== undefined) {
      this.companyNamePartical = args.companyNamePartical;
    }
    if (args.versionTag !== undefined) {
      this.versionTag = args.versionTag;
    }
    if (args.maintenanceTimeSpan !== undefined) {
      this.maintenanceTimeSpan = args.maintenanceTimeSpan;
    }
    if (args.maintenanceState !== undefined) {
      this.maintenanceState = args.maintenanceState;
    }
  }
};
CompanyServiceMaintenanceFilter.prototype = {};
CompanyServiceMaintenanceFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.maintenanceTimeSpan = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.maintenanceState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyServiceMaintenanceFilter.prototype.write = function(output) {
  output.writeStructBegin('CompanyServiceMaintenanceFilter');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyNamePartical !== null && this.companyNamePartical !== undefined) {
    output.writeFieldBegin('companyNamePartical', Thrift.Type.STRING, 2);
    output.writeString(this.companyNamePartical);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 3);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.maintenanceTimeSpan !== null && this.maintenanceTimeSpan !== undefined) {
    output.writeFieldBegin('maintenanceTimeSpan', Thrift.Type.I32, 4);
    output.writeI32(this.maintenanceTimeSpan);
    output.writeFieldEnd();
  }
  if (this.maintenanceState !== null && this.maintenanceState !== undefined) {
    output.writeFieldBegin('maintenanceState', Thrift.Type.I32, 5);
    output.writeI32(this.maintenanceState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NewUpgradeSchedule = function(args) {
  this.companyIds = null;
  this.targetVersionId = null;
  this.operator = null;
  if (args) {
    if (args.companyIds !== undefined) {
      this.companyIds = args.companyIds;
    }
    if (args.targetVersionId !== undefined) {
      this.targetVersionId = args.targetVersionId;
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
  }
};
NewUpgradeSchedule.prototype = {};
NewUpgradeSchedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.companyIds = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI64().value;
          this.companyIds.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.targetVersionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NewUpgradeSchedule.prototype.write = function(output) {
  output.writeStructBegin('NewUpgradeSchedule');
  if (this.companyIds !== null && this.companyIds !== undefined) {
    output.writeFieldBegin('companyIds', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I64, this.companyIds.length);
    for (var iter23 in this.companyIds)
    {
      if (this.companyIds.hasOwnProperty(iter23))
      {
        iter23 = this.companyIds[iter23];
        output.writeI64(iter23);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.targetVersionId !== null && this.targetVersionId !== undefined) {
    output.writeFieldBegin('targetVersionId', Thrift.Type.I64, 2);
    output.writeI64(this.targetVersionId);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 4);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NewRollbackSchedule = function(args) {
  this.companyId = null;
  this.targetVersionId = null;
  this.operator = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.targetVersionId !== undefined) {
      this.targetVersionId = args.targetVersionId;
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    }
  }
};
NewRollbackSchedule.prototype = {};
NewRollbackSchedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.targetVersionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operator = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NewRollbackSchedule.prototype.write = function(output) {
  output.writeStructBegin('NewRollbackSchedule');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.targetVersionId !== null && this.targetVersionId !== undefined) {
    output.writeFieldBegin('targetVersionId', Thrift.Type.I64, 2);
    output.writeI64(this.targetVersionId);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.STRING, 4);
    output.writeString(this.operator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompanyServiceMaintenancePage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
CompanyServiceMaintenancePage.prototype = {};
CompanyServiceMaintenancePage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.page = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new CompanyServiceMaintenance();
          elem30.read(input);
          this.page.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompanyServiceMaintenancePage.prototype.write = function(output) {
  output.writeStructBegin('CompanyServiceMaintenancePage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter31 in this.page)
    {
      if (this.page.hasOwnProperty(iter31))
      {
        iter31 = this.page[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqMaintenanceScheduleDetailFilter = function(args) {
  this.companyId = null;
  this.companyNamePartical = null;
  this.versionTag = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.companyNamePartical !== undefined) {
      this.companyNamePartical = args.companyNamePartical;
    }
    if (args.versionTag !== undefined) {
      this.versionTag = args.versionTag;
    }
  }
};
ReqMaintenanceScheduleDetailFilter.prototype = {};
ReqMaintenanceScheduleDetailFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqMaintenanceScheduleDetailFilter.prototype.write = function(output) {
  output.writeStructBegin('ReqMaintenanceScheduleDetailFilter');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.companyNamePartical !== null && this.companyNamePartical !== undefined) {
    output.writeFieldBegin('companyNamePartical', Thrift.Type.STRING, 2);
    output.writeString(this.companyNamePartical);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 3);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VersionInfo = function(args) {
  this.versionId = null;
  this.versionTag = null;
  this.versionTimestamp = null;
  if (args) {
    if (args.versionId !== undefined) {
      this.versionId = args.versionId;
    }
    if (args.versionTag !== undefined) {
      this.versionTag = args.versionTag;
    }
    if (args.versionTimestamp !== undefined) {
      this.versionTimestamp = args.versionTimestamp;
    }
  }
};
VersionInfo.prototype = {};
VersionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.versionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.versionTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionInfo.prototype.write = function(output) {
  output.writeStructBegin('VersionInfo');
  if (this.versionId !== null && this.versionId !== undefined) {
    output.writeFieldBegin('versionId', Thrift.Type.I64, 1);
    output.writeI64(this.versionId);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 2);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.versionTimestamp !== null && this.versionTimestamp !== undefined) {
    output.writeFieldBegin('versionTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.versionTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

