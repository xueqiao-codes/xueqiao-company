//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


OperateType = {
'UPGRADE' : 0,
'ROLLBACK' : 1
};
MaintenanceState = {
'EMPTY' : 0,
'SCHEDULED' : 1
};
MaintenanceTimeSpan = {
'WEEKEND' : 0,
'WORKING_DAY' : 1
};
ServiceMaintenance = function(args) {
  this.companyId = null;
  this.maintenanceTimeSpans = null;
  this.maintenanceState = null;
  this.versionId = null;
  this.versionTag = null;
  this.createTimestamp = null;
  this.lastModifyTimestamp = null;
  this.keepLatest = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.maintenanceTimeSpans !== undefined) {
      this.maintenanceTimeSpans = args.maintenanceTimeSpans;
    }
    if (args.maintenanceState !== undefined) {
      this.maintenanceState = args.maintenanceState;
    }
    if (args.versionId !== undefined) {
      this.versionId = args.versionId;
    }
    if (args.versionTag !== undefined) {
      this.versionTag = args.versionTag;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifyTimestamp !== undefined) {
      this.lastModifyTimestamp = args.lastModifyTimestamp;
    }
    if (args.keepLatest !== undefined) {
      this.keepLatest = args.keepLatest;
    }
  }
};
ServiceMaintenance.prototype = {};
ServiceMaintenance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.maintenanceTimeSpans = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.maintenanceTimeSpans.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maintenanceState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.versionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.versionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModifyTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLatest = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceMaintenance.prototype.write = function(output) {
  output.writeStructBegin('ServiceMaintenance');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.maintenanceTimeSpans !== null && this.maintenanceTimeSpans !== undefined) {
    output.writeFieldBegin('maintenanceTimeSpans', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.I32, this.maintenanceTimeSpans.length);
    for (var iter7 in this.maintenanceTimeSpans)
    {
      if (this.maintenanceTimeSpans.hasOwnProperty(iter7))
      {
        iter7 = this.maintenanceTimeSpans[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.maintenanceState !== null && this.maintenanceState !== undefined) {
    output.writeFieldBegin('maintenanceState', Thrift.Type.I32, 3);
    output.writeI32(this.maintenanceState);
    output.writeFieldEnd();
  }
  if (this.versionId !== null && this.versionId !== undefined) {
    output.writeFieldBegin('versionId', Thrift.Type.I64, 4);
    output.writeI64(this.versionId);
    output.writeFieldEnd();
  }
  if (this.versionTag !== null && this.versionTag !== undefined) {
    output.writeFieldBegin('versionTag', Thrift.Type.STRING, 5);
    output.writeString(this.versionTag);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 6);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifyTimestamp !== null && this.lastModifyTimestamp !== undefined) {
    output.writeFieldBegin('lastModifyTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.lastModifyTimestamp);
    output.writeFieldEnd();
  }
  if (this.keepLatest !== null && this.keepLatest !== undefined) {
    output.writeFieldBegin('keepLatest', Thrift.Type.BOOL, 8);
    output.writeBool(this.keepLatest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MaintenanceHistory = function(args) {
  this.historyId = null;
  this.companyId = null;
  this.createScheduleTimestamp = null;
  this.oldVersionTag = null;
  this.oldVersionId = null;
  this.targetVersionTag = null;
  this.targetVersionId = null;
  this.operateType = null;
  this.scheduledTimestamp = null;
  this.maintenanceTimeSpans = null;
  this.creater = null;
  this.createTimestamp = null;
  this.lastModifyTimestamp = null;
  if (args) {
    if (args.historyId !== undefined) {
      this.historyId = args.historyId;
    }
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.createScheduleTimestamp !== undefined) {
      this.createScheduleTimestamp = args.createScheduleTimestamp;
    }
    if (args.oldVersionTag !== undefined) {
      this.oldVersionTag = args.oldVersionTag;
    }
    if (args.oldVersionId !== undefined) {
      this.oldVersionId = args.oldVersionId;
    }
    if (args.targetVersionTag !== undefined) {
      this.targetVersionTag = args.targetVersionTag;
    }
    if (args.targetVersionId !== undefined) {
      this.targetVersionId = args.targetVersionId;
    }
    if (args.operateType !== undefined) {
      this.operateType = args.operateType;
    }
    if (args.scheduledTimestamp !== undefined) {
      this.scheduledTimestamp = args.scheduledTimestamp;
    }
    if (args.maintenanceTimeSpans !== undefined) {
      this.maintenanceTimeSpans = args.maintenanceTimeSpans;
    }
    if (args.creater !== undefined) {
      this.creater = args.creater;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifyTimestamp !== undefined) {
      this.lastModifyTimestamp = args.lastModifyTimestamp;
    }
  }
};
MaintenanceHistory.prototype = {};
MaintenanceHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.historyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createScheduleTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.oldVersionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.oldVersionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.targetVersionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.targetVersionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.operateType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.scheduledTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.SET) {
        var _size8 = 0;
        var _rtmp312;
        this.maintenanceTimeSpans = [];
        var _etype11 = 0;
        _rtmp312 = input.readSetBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32().value;
          this.maintenanceTimeSpans.push(elem14);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.creater = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.lastModifyTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MaintenanceHistory.prototype.write = function(output) {
  output.writeStructBegin('MaintenanceHistory');
  if (this.historyId !== null && this.historyId !== undefined) {
    output.writeFieldBegin('historyId', Thrift.Type.I64, 1);
    output.writeI64(this.historyId);
    output.writeFieldEnd();
  }
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 2);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.createScheduleTimestamp !== null && this.createScheduleTimestamp !== undefined) {
    output.writeFieldBegin('createScheduleTimestamp', Thrift.Type.I64, 3);
    output.writeI64(this.createScheduleTimestamp);
    output.writeFieldEnd();
  }
  if (this.oldVersionTag !== null && this.oldVersionTag !== undefined) {
    output.writeFieldBegin('oldVersionTag', Thrift.Type.STRING, 4);
    output.writeString(this.oldVersionTag);
    output.writeFieldEnd();
  }
  if (this.oldVersionId !== null && this.oldVersionId !== undefined) {
    output.writeFieldBegin('oldVersionId', Thrift.Type.I64, 5);
    output.writeI64(this.oldVersionId);
    output.writeFieldEnd();
  }
  if (this.targetVersionTag !== null && this.targetVersionTag !== undefined) {
    output.writeFieldBegin('targetVersionTag', Thrift.Type.STRING, 6);
    output.writeString(this.targetVersionTag);
    output.writeFieldEnd();
  }
  if (this.targetVersionId !== null && this.targetVersionId !== undefined) {
    output.writeFieldBegin('targetVersionId', Thrift.Type.I64, 7);
    output.writeI64(this.targetVersionId);
    output.writeFieldEnd();
  }
  if (this.operateType !== null && this.operateType !== undefined) {
    output.writeFieldBegin('operateType', Thrift.Type.I32, 8);
    output.writeI32(this.operateType);
    output.writeFieldEnd();
  }
  if (this.scheduledTimestamp !== null && this.scheduledTimestamp !== undefined) {
    output.writeFieldBegin('scheduledTimestamp', Thrift.Type.I64, 9);
    output.writeI64(this.scheduledTimestamp);
    output.writeFieldEnd();
  }
  if (this.maintenanceTimeSpans !== null && this.maintenanceTimeSpans !== undefined) {
    output.writeFieldBegin('maintenanceTimeSpans', Thrift.Type.SET, 10);
    output.writeSetBegin(Thrift.Type.I32, this.maintenanceTimeSpans.length);
    for (var iter15 in this.maintenanceTimeSpans)
    {
      if (this.maintenanceTimeSpans.hasOwnProperty(iter15))
      {
        iter15 = this.maintenanceTimeSpans[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.creater !== null && this.creater !== undefined) {
    output.writeFieldBegin('creater', Thrift.Type.STRING, 11);
    output.writeString(this.creater);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 12);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifyTimestamp !== null && this.lastModifyTimestamp !== undefined) {
    output.writeFieldBegin('lastModifyTimestamp', Thrift.Type.I64, 13);
    output.writeI64(this.lastModifyTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScheduleOperateDetail = function(args) {
  this.companyId = null;
  this.oldVersionTag = null;
  this.oldVersionId = null;
  this.targetVersionTag = null;
  this.targetVersionId = null;
  this.operateType = null;
  this.scheduledTimestamp = null;
  this.maintenanceTimeSpans = null;
  this.creater = null;
  this.createTimestamp = null;
  this.lastModifyTimestamp = null;
  if (args) {
    if (args.companyId !== undefined) {
      this.companyId = args.companyId;
    }
    if (args.oldVersionTag !== undefined) {
      this.oldVersionTag = args.oldVersionTag;
    }
    if (args.oldVersionId !== undefined) {
      this.oldVersionId = args.oldVersionId;
    }
    if (args.targetVersionTag !== undefined) {
      this.targetVersionTag = args.targetVersionTag;
    }
    if (args.targetVersionId !== undefined) {
      this.targetVersionId = args.targetVersionId;
    }
    if (args.operateType !== undefined) {
      this.operateType = args.operateType;
    }
    if (args.scheduledTimestamp !== undefined) {
      this.scheduledTimestamp = args.scheduledTimestamp;
    }
    if (args.maintenanceTimeSpans !== undefined) {
      this.maintenanceTimeSpans = args.maintenanceTimeSpans;
    }
    if (args.creater !== undefined) {
      this.creater = args.creater;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.lastModifyTimestamp !== undefined) {
      this.lastModifyTimestamp = args.lastModifyTimestamp;
    }
  }
};
ScheduleOperateDetail.prototype = {};
ScheduleOperateDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.companyId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldVersionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.oldVersionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.targetVersionTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.targetVersionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.operateType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.scheduledTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.maintenanceTimeSpans = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32().value;
          this.maintenanceTimeSpans.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.creater = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.lastModifyTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduleOperateDetail.prototype.write = function(output) {
  output.writeStructBegin('ScheduleOperateDetail');
  if (this.companyId !== null && this.companyId !== undefined) {
    output.writeFieldBegin('companyId', Thrift.Type.I64, 1);
    output.writeI64(this.companyId);
    output.writeFieldEnd();
  }
  if (this.oldVersionTag !== null && this.oldVersionTag !== undefined) {
    output.writeFieldBegin('oldVersionTag', Thrift.Type.STRING, 2);
    output.writeString(this.oldVersionTag);
    output.writeFieldEnd();
  }
  if (this.oldVersionId !== null && this.oldVersionId !== undefined) {
    output.writeFieldBegin('oldVersionId', Thrift.Type.I64, 3);
    output.writeI64(this.oldVersionId);
    output.writeFieldEnd();
  }
  if (this.targetVersionTag !== null && this.targetVersionTag !== undefined) {
    output.writeFieldBegin('targetVersionTag', Thrift.Type.STRING, 4);
    output.writeString(this.targetVersionTag);
    output.writeFieldEnd();
  }
  if (this.targetVersionId !== null && this.targetVersionId !== undefined) {
    output.writeFieldBegin('targetVersionId', Thrift.Type.I64, 5);
    output.writeI64(this.targetVersionId);
    output.writeFieldEnd();
  }
  if (this.operateType !== null && this.operateType !== undefined) {
    output.writeFieldBegin('operateType', Thrift.Type.I32, 6);
    output.writeI32(this.operateType);
    output.writeFieldEnd();
  }
  if (this.scheduledTimestamp !== null && this.scheduledTimestamp !== undefined) {
    output.writeFieldBegin('scheduledTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.scheduledTimestamp);
    output.writeFieldEnd();
  }
  if (this.maintenanceTimeSpans !== null && this.maintenanceTimeSpans !== undefined) {
    output.writeFieldBegin('maintenanceTimeSpans', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I32, this.maintenanceTimeSpans.length);
    for (var iter23 in this.maintenanceTimeSpans)
    {
      if (this.maintenanceTimeSpans.hasOwnProperty(iter23))
      {
        iter23 = this.maintenanceTimeSpans[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.creater !== null && this.creater !== undefined) {
    output.writeFieldBegin('creater', Thrift.Type.STRING, 9);
    output.writeString(this.creater);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 10);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.lastModifyTimestamp !== null && this.lastModifyTimestamp !== undefined) {
    output.writeFieldBegin('lastModifyTimestamp', Thrift.Type.I64, 11);
    output.writeI64(this.lastModifyTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

