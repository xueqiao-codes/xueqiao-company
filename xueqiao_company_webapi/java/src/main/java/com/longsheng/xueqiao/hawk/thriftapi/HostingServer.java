/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.hawk.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingServer implements org.apache.thrift.TBase<HostingServer, HostingServer._Fields>, java.io.Serializable, Cloneable, Comparable<HostingServer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingServer");

  private static final org.apache.thrift.protocol.TField OUT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("outAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OUT_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("outPort", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingServerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingServerTupleSchemeFactory());
  }

  public String outAddress; // optional
  public int outPort; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUT_ADDRESS((short)1, "outAddress"),
    OUT_PORT((short)2, "outPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUT_ADDRESS
          return OUT_ADDRESS;
        case 2: // OUT_PORT
          return OUT_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OUTPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OUT_ADDRESS,_Fields.OUT_PORT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("outAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUT_PORT, new org.apache.thrift.meta_data.FieldMetaData("outPort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingServer.class, metaDataMap);
  }

  public HostingServer() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingServer(HostingServer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOutAddress()) {
      this.outAddress = other.outAddress;
    }
    this.outPort = other.outPort;
  }

  public HostingServer deepCopy() {
    return new HostingServer(this);
  }

  @Override
  public void clear() {
    this.outAddress = null;
    setOutPortIsSet(false);
    this.outPort = 0;
  }

  public String getOutAddress() {
    return this.outAddress;
  }

  public HostingServer setOutAddress(String outAddress) {
    this.outAddress = outAddress;
    return this;
  }

  public void unsetOutAddress() {
    this.outAddress = null;
  }

  /** Returns true if field outAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetOutAddress() {
    return this.outAddress != null;
  }

  public void setOutAddressIsSet(boolean value) {
    if (!value) {
      this.outAddress = null;
    }
  }

  public int getOutPort() {
    return this.outPort;
  }

  public HostingServer setOutPort(int outPort) {
    this.outPort = outPort;
    setOutPortIsSet(true);
    return this;
  }

  public void unsetOutPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPORT_ISSET_ID);
  }

  /** Returns true if field outPort is set (has been assigned a value) and false otherwise */
  public boolean isSetOutPort() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPORT_ISSET_ID);
  }

  public void setOutPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OUT_ADDRESS:
      if (value == null) {
        unsetOutAddress();
      } else {
        setOutAddress((String)value);
      }
      break;

    case OUT_PORT:
      if (value == null) {
        unsetOutPort();
      } else {
        setOutPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OUT_ADDRESS:
      return getOutAddress();

    case OUT_PORT:
      return Integer.valueOf(getOutPort());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OUT_ADDRESS:
      return isSetOutAddress();
    case OUT_PORT:
      return isSetOutPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingServer)
      return this.equals((HostingServer)that);
    return false;
  }

  public boolean equals(HostingServer that) {
    if (that == null)
      return false;

    boolean this_present_outAddress = true && this.isSetOutAddress();
    boolean that_present_outAddress = true && that.isSetOutAddress();
    if (this_present_outAddress || that_present_outAddress) {
      if (!(this_present_outAddress && that_present_outAddress))
        return false;
      if (!this.outAddress.equals(that.outAddress))
        return false;
    }

    boolean this_present_outPort = true && this.isSetOutPort();
    boolean that_present_outPort = true && that.isSetOutPort();
    if (this_present_outPort || that_present_outPort) {
      if (!(this_present_outPort && that_present_outPort))
        return false;
      if (this.outPort != that.outPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingServer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOutAddress()).compareTo(other.isSetOutAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outAddress, other.outAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutPort()).compareTo(other.isSetOutPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outPort, other.outPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingServer(");
    boolean first = true;

    if (isSetOutAddress()) {
      sb.append("outAddress:");
      if (this.outAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.outAddress);
      }
      first = false;
    }
    if (isSetOutPort()) {
      if (!first) sb.append(", ");
      sb.append("outPort:");
      sb.append(this.outPort);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingServerStandardSchemeFactory implements SchemeFactory {
    public HostingServerStandardScheme getScheme() {
      return new HostingServerStandardScheme();
    }
  }

  private static class HostingServerStandardScheme extends StandardScheme<HostingServer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingServer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUT_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outAddress = iprot.readString();
              struct.setOutAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUT_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outPort = iprot.readI32();
              struct.setOutPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingServer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outAddress != null) {
        if (struct.isSetOutAddress()) {
          oprot.writeFieldBegin(OUT_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.outAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutPort()) {
        oprot.writeFieldBegin(OUT_PORT_FIELD_DESC);
        oprot.writeI32(struct.outPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingServerTupleSchemeFactory implements SchemeFactory {
    public HostingServerTupleScheme getScheme() {
      return new HostingServerTupleScheme();
    }
  }

  private static class HostingServerTupleScheme extends TupleScheme<HostingServer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingServer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOutAddress()) {
        optionals.set(0);
      }
      if (struct.isSetOutPort()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetOutAddress()) {
        oprot.writeString(struct.outAddress);
      }
      if (struct.isSetOutPort()) {
        oprot.writeI32(struct.outPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingServer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.outAddress = iprot.readString();
        struct.setOutAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.outPort = iprot.readI32();
        struct.setOutPortIsSet(true);
      }
    }
  }

}

