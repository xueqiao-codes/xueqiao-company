/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.hawk.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Compose implements org.apache.thrift.TBase<Compose, Compose._Fields>, java.io.Serializable, Cloneable, Comparable<Compose> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Compose");

  private static final org.apache.thrift.protocol.TField COMPOSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("composeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPOSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("composeName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FORMULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("formular", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STOP_LOST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopLostPrice", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STOP_WIN_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("stopWinPrice", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COMPOSE_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("composeUnits", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TIME_REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeRegions", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComposeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComposeTupleSchemeFactory());
  }

  public int composeId; // optional
  public int userId; // optional
  public String composeName; // optional
  public String formular; // optional
  public int stopLostPrice; // optional
  public int stopWinPrice; // optional
  public List<ComposeUnit> composeUnits; // optional
  public List<TimeRegion> timeRegions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPOSE_ID((short)1, "composeId"),
    USER_ID((short)2, "userId"),
    COMPOSE_NAME((short)3, "composeName"),
    FORMULAR((short)4, "formular"),
    STOP_LOST_PRICE((short)5, "stopLostPrice"),
    STOP_WIN_PRICE((short)6, "stopWinPrice"),
    COMPOSE_UNITS((short)7, "composeUnits"),
    TIME_REGIONS((short)8, "timeRegions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPOSE_ID
          return COMPOSE_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // COMPOSE_NAME
          return COMPOSE_NAME;
        case 4: // FORMULAR
          return FORMULAR;
        case 5: // STOP_LOST_PRICE
          return STOP_LOST_PRICE;
        case 6: // STOP_WIN_PRICE
          return STOP_WIN_PRICE;
        case 7: // COMPOSE_UNITS
          return COMPOSE_UNITS;
        case 8: // TIME_REGIONS
          return TIME_REGIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPOSEID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __STOPLOSTPRICE_ISSET_ID = 2;
  private static final int __STOPWINPRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPOSE_ID,_Fields.USER_ID,_Fields.COMPOSE_NAME,_Fields.FORMULAR,_Fields.STOP_LOST_PRICE,_Fields.STOP_WIN_PRICE,_Fields.COMPOSE_UNITS,_Fields.TIME_REGIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPOSE_ID, new org.apache.thrift.meta_data.FieldMetaData("composeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPOSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("composeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMULAR, new org.apache.thrift.meta_data.FieldMetaData("formular", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_LOST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("stopLostPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STOP_WIN_PRICE, new org.apache.thrift.meta_data.FieldMetaData("stopWinPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPOSE_UNITS, new org.apache.thrift.meta_data.FieldMetaData("composeUnits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComposeUnit.class))));
    tmpMap.put(_Fields.TIME_REGIONS, new org.apache.thrift.meta_data.FieldMetaData("timeRegions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRegion.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Compose.class, metaDataMap);
  }

  public Compose() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Compose(Compose other) {
    __isset_bitfield = other.__isset_bitfield;
    this.composeId = other.composeId;
    this.userId = other.userId;
    if (other.isSetComposeName()) {
      this.composeName = other.composeName;
    }
    if (other.isSetFormular()) {
      this.formular = other.formular;
    }
    this.stopLostPrice = other.stopLostPrice;
    this.stopWinPrice = other.stopWinPrice;
    if (other.isSetComposeUnits()) {
      List<ComposeUnit> __this__composeUnits = new ArrayList<ComposeUnit>(other.composeUnits.size());
      for (ComposeUnit other_element : other.composeUnits) {
        __this__composeUnits.add(new ComposeUnit(other_element));
      }
      this.composeUnits = __this__composeUnits;
    }
    if (other.isSetTimeRegions()) {
      List<TimeRegion> __this__timeRegions = new ArrayList<TimeRegion>(other.timeRegions.size());
      for (TimeRegion other_element : other.timeRegions) {
        __this__timeRegions.add(new TimeRegion(other_element));
      }
      this.timeRegions = __this__timeRegions;
    }
  }

  public Compose deepCopy() {
    return new Compose(this);
  }

  @Override
  public void clear() {
    setComposeIdIsSet(false);
    this.composeId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    this.composeName = null;
    this.formular = null;
    setStopLostPriceIsSet(false);
    this.stopLostPrice = 0;
    setStopWinPriceIsSet(false);
    this.stopWinPrice = 0;
    this.composeUnits = null;
    this.timeRegions = null;
  }

  public int getComposeId() {
    return this.composeId;
  }

  public Compose setComposeId(int composeId) {
    this.composeId = composeId;
    setComposeIdIsSet(true);
    return this;
  }

  public void unsetComposeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEID_ISSET_ID);
  }

  /** Returns true if field composeId is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEID_ISSET_ID);
  }

  public void setComposeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public Compose setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getComposeName() {
    return this.composeName;
  }

  public Compose setComposeName(String composeName) {
    this.composeName = composeName;
    return this;
  }

  public void unsetComposeName() {
    this.composeName = null;
  }

  /** Returns true if field composeName is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeName() {
    return this.composeName != null;
  }

  public void setComposeNameIsSet(boolean value) {
    if (!value) {
      this.composeName = null;
    }
  }

  public String getFormular() {
    return this.formular;
  }

  public Compose setFormular(String formular) {
    this.formular = formular;
    return this;
  }

  public void unsetFormular() {
    this.formular = null;
  }

  /** Returns true if field formular is set (has been assigned a value) and false otherwise */
  public boolean isSetFormular() {
    return this.formular != null;
  }

  public void setFormularIsSet(boolean value) {
    if (!value) {
      this.formular = null;
    }
  }

  public int getStopLostPrice() {
    return this.stopLostPrice;
  }

  public Compose setStopLostPrice(int stopLostPrice) {
    this.stopLostPrice = stopLostPrice;
    setStopLostPriceIsSet(true);
    return this;
  }

  public void unsetStopLostPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPLOSTPRICE_ISSET_ID);
  }

  /** Returns true if field stopLostPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStopLostPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPLOSTPRICE_ISSET_ID);
  }

  public void setStopLostPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPLOSTPRICE_ISSET_ID, value);
  }

  public int getStopWinPrice() {
    return this.stopWinPrice;
  }

  public Compose setStopWinPrice(int stopWinPrice) {
    this.stopWinPrice = stopWinPrice;
    setStopWinPriceIsSet(true);
    return this;
  }

  public void unsetStopWinPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STOPWINPRICE_ISSET_ID);
  }

  /** Returns true if field stopWinPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetStopWinPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __STOPWINPRICE_ISSET_ID);
  }

  public void setStopWinPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STOPWINPRICE_ISSET_ID, value);
  }

  public int getComposeUnitsSize() {
    return (this.composeUnits == null) ? 0 : this.composeUnits.size();
  }

  public java.util.Iterator<ComposeUnit> getComposeUnitsIterator() {
    return (this.composeUnits == null) ? null : this.composeUnits.iterator();
  }

  public void addToComposeUnits(ComposeUnit elem) {
    if (this.composeUnits == null) {
      this.composeUnits = new ArrayList<ComposeUnit>();
    }
    this.composeUnits.add(elem);
  }

  public List<ComposeUnit> getComposeUnits() {
    return this.composeUnits;
  }

  public Compose setComposeUnits(List<ComposeUnit> composeUnits) {
    this.composeUnits = composeUnits;
    return this;
  }

  public void unsetComposeUnits() {
    this.composeUnits = null;
  }

  /** Returns true if field composeUnits is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeUnits() {
    return this.composeUnits != null;
  }

  public void setComposeUnitsIsSet(boolean value) {
    if (!value) {
      this.composeUnits = null;
    }
  }

  public int getTimeRegionsSize() {
    return (this.timeRegions == null) ? 0 : this.timeRegions.size();
  }

  public java.util.Iterator<TimeRegion> getTimeRegionsIterator() {
    return (this.timeRegions == null) ? null : this.timeRegions.iterator();
  }

  public void addToTimeRegions(TimeRegion elem) {
    if (this.timeRegions == null) {
      this.timeRegions = new ArrayList<TimeRegion>();
    }
    this.timeRegions.add(elem);
  }

  public List<TimeRegion> getTimeRegions() {
    return this.timeRegions;
  }

  public Compose setTimeRegions(List<TimeRegion> timeRegions) {
    this.timeRegions = timeRegions;
    return this;
  }

  public void unsetTimeRegions() {
    this.timeRegions = null;
  }

  /** Returns true if field timeRegions is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRegions() {
    return this.timeRegions != null;
  }

  public void setTimeRegionsIsSet(boolean value) {
    if (!value) {
      this.timeRegions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPOSE_ID:
      if (value == null) {
        unsetComposeId();
      } else {
        setComposeId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case COMPOSE_NAME:
      if (value == null) {
        unsetComposeName();
      } else {
        setComposeName((String)value);
      }
      break;

    case FORMULAR:
      if (value == null) {
        unsetFormular();
      } else {
        setFormular((String)value);
      }
      break;

    case STOP_LOST_PRICE:
      if (value == null) {
        unsetStopLostPrice();
      } else {
        setStopLostPrice((Integer)value);
      }
      break;

    case STOP_WIN_PRICE:
      if (value == null) {
        unsetStopWinPrice();
      } else {
        setStopWinPrice((Integer)value);
      }
      break;

    case COMPOSE_UNITS:
      if (value == null) {
        unsetComposeUnits();
      } else {
        setComposeUnits((List<ComposeUnit>)value);
      }
      break;

    case TIME_REGIONS:
      if (value == null) {
        unsetTimeRegions();
      } else {
        setTimeRegions((List<TimeRegion>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPOSE_ID:
      return Integer.valueOf(getComposeId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case COMPOSE_NAME:
      return getComposeName();

    case FORMULAR:
      return getFormular();

    case STOP_LOST_PRICE:
      return Integer.valueOf(getStopLostPrice());

    case STOP_WIN_PRICE:
      return Integer.valueOf(getStopWinPrice());

    case COMPOSE_UNITS:
      return getComposeUnits();

    case TIME_REGIONS:
      return getTimeRegions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPOSE_ID:
      return isSetComposeId();
    case USER_ID:
      return isSetUserId();
    case COMPOSE_NAME:
      return isSetComposeName();
    case FORMULAR:
      return isSetFormular();
    case STOP_LOST_PRICE:
      return isSetStopLostPrice();
    case STOP_WIN_PRICE:
      return isSetStopWinPrice();
    case COMPOSE_UNITS:
      return isSetComposeUnits();
    case TIME_REGIONS:
      return isSetTimeRegions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Compose)
      return this.equals((Compose)that);
    return false;
  }

  public boolean equals(Compose that) {
    if (that == null)
      return false;

    boolean this_present_composeId = true && this.isSetComposeId();
    boolean that_present_composeId = true && that.isSetComposeId();
    if (this_present_composeId || that_present_composeId) {
      if (!(this_present_composeId && that_present_composeId))
        return false;
      if (this.composeId != that.composeId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_composeName = true && this.isSetComposeName();
    boolean that_present_composeName = true && that.isSetComposeName();
    if (this_present_composeName || that_present_composeName) {
      if (!(this_present_composeName && that_present_composeName))
        return false;
      if (!this.composeName.equals(that.composeName))
        return false;
    }

    boolean this_present_formular = true && this.isSetFormular();
    boolean that_present_formular = true && that.isSetFormular();
    if (this_present_formular || that_present_formular) {
      if (!(this_present_formular && that_present_formular))
        return false;
      if (!this.formular.equals(that.formular))
        return false;
    }

    boolean this_present_stopLostPrice = true && this.isSetStopLostPrice();
    boolean that_present_stopLostPrice = true && that.isSetStopLostPrice();
    if (this_present_stopLostPrice || that_present_stopLostPrice) {
      if (!(this_present_stopLostPrice && that_present_stopLostPrice))
        return false;
      if (this.stopLostPrice != that.stopLostPrice)
        return false;
    }

    boolean this_present_stopWinPrice = true && this.isSetStopWinPrice();
    boolean that_present_stopWinPrice = true && that.isSetStopWinPrice();
    if (this_present_stopWinPrice || that_present_stopWinPrice) {
      if (!(this_present_stopWinPrice && that_present_stopWinPrice))
        return false;
      if (this.stopWinPrice != that.stopWinPrice)
        return false;
    }

    boolean this_present_composeUnits = true && this.isSetComposeUnits();
    boolean that_present_composeUnits = true && that.isSetComposeUnits();
    if (this_present_composeUnits || that_present_composeUnits) {
      if (!(this_present_composeUnits && that_present_composeUnits))
        return false;
      if (!this.composeUnits.equals(that.composeUnits))
        return false;
    }

    boolean this_present_timeRegions = true && this.isSetTimeRegions();
    boolean that_present_timeRegions = true && that.isSetTimeRegions();
    if (this_present_timeRegions || that_present_timeRegions) {
      if (!(this_present_timeRegions && that_present_timeRegions))
        return false;
      if (!this.timeRegions.equals(that.timeRegions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Compose other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComposeId()).compareTo(other.isSetComposeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeId, other.composeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeName()).compareTo(other.isSetComposeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeName, other.composeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormular()).compareTo(other.isSetFormular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formular, other.formular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopLostPrice()).compareTo(other.isSetStopLostPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopLostPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopLostPrice, other.stopLostPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopWinPrice()).compareTo(other.isSetStopWinPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopWinPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopWinPrice, other.stopWinPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeUnits()).compareTo(other.isSetComposeUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeUnits, other.composeUnits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRegions()).compareTo(other.isSetTimeRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeRegions, other.timeRegions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Compose(");
    boolean first = true;

    if (isSetComposeId()) {
      sb.append("composeId:");
      sb.append(this.composeId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetComposeName()) {
      if (!first) sb.append(", ");
      sb.append("composeName:");
      if (this.composeName == null) {
        sb.append("null");
      } else {
        sb.append(this.composeName);
      }
      first = false;
    }
    if (isSetFormular()) {
      if (!first) sb.append(", ");
      sb.append("formular:");
      if (this.formular == null) {
        sb.append("null");
      } else {
        sb.append(this.formular);
      }
      first = false;
    }
    if (isSetStopLostPrice()) {
      if (!first) sb.append(", ");
      sb.append("stopLostPrice:");
      sb.append(this.stopLostPrice);
      first = false;
    }
    if (isSetStopWinPrice()) {
      if (!first) sb.append(", ");
      sb.append("stopWinPrice:");
      sb.append(this.stopWinPrice);
      first = false;
    }
    if (isSetComposeUnits()) {
      if (!first) sb.append(", ");
      sb.append("composeUnits:");
      if (this.composeUnits == null) {
        sb.append("null");
      } else {
        sb.append(this.composeUnits);
      }
      first = false;
    }
    if (isSetTimeRegions()) {
      if (!first) sb.append(", ");
      sb.append("timeRegions:");
      if (this.timeRegions == null) {
        sb.append("null");
      } else {
        sb.append(this.timeRegions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComposeStandardSchemeFactory implements SchemeFactory {
    public ComposeStandardScheme getScheme() {
      return new ComposeStandardScheme();
    }
  }

  private static class ComposeStandardScheme extends StandardScheme<Compose> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Compose struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPOSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.composeId = iprot.readI32();
              struct.setComposeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPOSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.composeName = iprot.readString();
              struct.setComposeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FORMULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formular = iprot.readString();
              struct.setFormularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STOP_LOST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopLostPrice = iprot.readI32();
              struct.setStopLostPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STOP_WIN_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stopWinPrice = iprot.readI32();
              struct.setStopWinPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPOSE_UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.composeUnits = new ArrayList<ComposeUnit>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  ComposeUnit _elem18;
                  _elem18 = new ComposeUnit();
                  _elem18.read(iprot);
                  struct.composeUnits.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setComposeUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TIME_REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.timeRegions = new ArrayList<TimeRegion>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  TimeRegion _elem21;
                  _elem21 = new TimeRegion();
                  _elem21.read(iprot);
                  struct.timeRegions.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setTimeRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Compose struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetComposeId()) {
        oprot.writeFieldBegin(COMPOSE_ID_FIELD_DESC);
        oprot.writeI32(struct.composeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.composeName != null) {
        if (struct.isSetComposeName()) {
          oprot.writeFieldBegin(COMPOSE_NAME_FIELD_DESC);
          oprot.writeString(struct.composeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.formular != null) {
        if (struct.isSetFormular()) {
          oprot.writeFieldBegin(FORMULAR_FIELD_DESC);
          oprot.writeString(struct.formular);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStopLostPrice()) {
        oprot.writeFieldBegin(STOP_LOST_PRICE_FIELD_DESC);
        oprot.writeI32(struct.stopLostPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStopWinPrice()) {
        oprot.writeFieldBegin(STOP_WIN_PRICE_FIELD_DESC);
        oprot.writeI32(struct.stopWinPrice);
        oprot.writeFieldEnd();
      }
      if (struct.composeUnits != null) {
        if (struct.isSetComposeUnits()) {
          oprot.writeFieldBegin(COMPOSE_UNITS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.composeUnits.size()));
            for (ComposeUnit _iter22 : struct.composeUnits)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeRegions != null) {
        if (struct.isSetTimeRegions()) {
          oprot.writeFieldBegin(TIME_REGIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timeRegions.size()));
            for (TimeRegion _iter23 : struct.timeRegions)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComposeTupleSchemeFactory implements SchemeFactory {
    public ComposeTupleScheme getScheme() {
      return new ComposeTupleScheme();
    }
  }

  private static class ComposeTupleScheme extends TupleScheme<Compose> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Compose struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetComposeId()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetComposeName()) {
        optionals.set(2);
      }
      if (struct.isSetFormular()) {
        optionals.set(3);
      }
      if (struct.isSetStopLostPrice()) {
        optionals.set(4);
      }
      if (struct.isSetStopWinPrice()) {
        optionals.set(5);
      }
      if (struct.isSetComposeUnits()) {
        optionals.set(6);
      }
      if (struct.isSetTimeRegions()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetComposeId()) {
        oprot.writeI32(struct.composeId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetComposeName()) {
        oprot.writeString(struct.composeName);
      }
      if (struct.isSetFormular()) {
        oprot.writeString(struct.formular);
      }
      if (struct.isSetStopLostPrice()) {
        oprot.writeI32(struct.stopLostPrice);
      }
      if (struct.isSetStopWinPrice()) {
        oprot.writeI32(struct.stopWinPrice);
      }
      if (struct.isSetComposeUnits()) {
        {
          oprot.writeI32(struct.composeUnits.size());
          for (ComposeUnit _iter24 : struct.composeUnits)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetTimeRegions()) {
        {
          oprot.writeI32(struct.timeRegions.size());
          for (TimeRegion _iter25 : struct.timeRegions)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Compose struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.composeId = iprot.readI32();
        struct.setComposeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.composeName = iprot.readString();
        struct.setComposeNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.formular = iprot.readString();
        struct.setFormularIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stopLostPrice = iprot.readI32();
        struct.setStopLostPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stopWinPrice = iprot.readI32();
        struct.setStopWinPriceIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.composeUnits = new ArrayList<ComposeUnit>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            ComposeUnit _elem28;
            _elem28 = new ComposeUnit();
            _elem28.read(iprot);
            struct.composeUnits.add(_elem28);
          }
        }
        struct.setComposeUnitsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeRegions = new ArrayList<TimeRegion>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            TimeRegion _elem31;
            _elem31 = new TimeRegion();
            _elem31.read(iprot);
            struct.timeRegions.add(_elem31);
          }
        }
        struct.setTimeRegionsIsSet(true);
      }
    }
  }

}

