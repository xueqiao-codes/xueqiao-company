/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.app.manager.webapi.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppFileUploadInfo implements org.apache.thrift.TBase<AppFileUploadInfo, AppFileUploadInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AppFileUploadInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppFileUploadInfo");

  private static final org.apache.thrift.protocol.TField APP_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SYSTEM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("systemType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXTEND_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("extendFileName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppFileUploadInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppFileUploadInfoTupleSchemeFactory());
  }

  public long appVersionId; // optional
  /**
   * 
   * @see SystemType
   */
  public SystemType systemType; // optional
  public ByteBuffer content; // optional
  public String extendFileName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_VERSION_ID((short)1, "appVersionId"),
    /**
     * 
     * @see SystemType
     */
    SYSTEM_TYPE((short)2, "systemType"),
    CONTENT((short)3, "content"),
    EXTEND_FILE_NAME((short)4, "extendFileName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_VERSION_ID
          return APP_VERSION_ID;
        case 2: // SYSTEM_TYPE
          return SYSTEM_TYPE;
        case 3: // CONTENT
          return CONTENT;
        case 4: // EXTEND_FILE_NAME
          return EXTEND_FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPVERSIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.APP_VERSION_ID,_Fields.SYSTEM_TYPE,_Fields.CONTENT,_Fields.EXTEND_FILE_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("appVersionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYSTEM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("systemType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SystemType.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXTEND_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("extendFileName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppFileUploadInfo.class, metaDataMap);
  }

  public AppFileUploadInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppFileUploadInfo(AppFileUploadInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.appVersionId = other.appVersionId;
    if (other.isSetSystemType()) {
      this.systemType = other.systemType;
    }
    if (other.isSetContent()) {
      this.content = org.apache.thrift.TBaseHelper.copyBinary(other.content);
;
    }
    if (other.isSetExtendFileName()) {
      this.extendFileName = other.extendFileName;
    }
  }

  public AppFileUploadInfo deepCopy() {
    return new AppFileUploadInfo(this);
  }

  @Override
  public void clear() {
    setAppVersionIdIsSet(false);
    this.appVersionId = 0;
    this.systemType = null;
    this.content = null;
    this.extendFileName = null;
  }

  public long getAppVersionId() {
    return this.appVersionId;
  }

  public AppFileUploadInfo setAppVersionId(long appVersionId) {
    this.appVersionId = appVersionId;
    setAppVersionIdIsSet(true);
    return this;
  }

  public void unsetAppVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPVERSIONID_ISSET_ID);
  }

  /** Returns true if field appVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPVERSIONID_ISSET_ID);
  }

  public void setAppVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPVERSIONID_ISSET_ID, value);
  }

  /**
   * 
   * @see SystemType
   */
  public SystemType getSystemType() {
    return this.systemType;
  }

  /**
   * 
   * @see SystemType
   */
  public AppFileUploadInfo setSystemType(SystemType systemType) {
    this.systemType = systemType;
    return this;
  }

  public void unsetSystemType() {
    this.systemType = null;
  }

  /** Returns true if field systemType is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemType() {
    return this.systemType != null;
  }

  public void setSystemTypeIsSet(boolean value) {
    if (!value) {
      this.systemType = null;
    }
  }

  public byte[] getContent() {
    setContent(org.apache.thrift.TBaseHelper.rightSize(content));
    return content == null ? null : content.array();
  }

  public ByteBuffer bufferForContent() {
    return content;
  }

  public AppFileUploadInfo setContent(byte[] content) {
    setContent(content == null ? (ByteBuffer)null : ByteBuffer.wrap(content));
    return this;
  }

  public AppFileUploadInfo setContent(ByteBuffer content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getExtendFileName() {
    return this.extendFileName;
  }

  public AppFileUploadInfo setExtendFileName(String extendFileName) {
    this.extendFileName = extendFileName;
    return this;
  }

  public void unsetExtendFileName() {
    this.extendFileName = null;
  }

  /** Returns true if field extendFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendFileName() {
    return this.extendFileName != null;
  }

  public void setExtendFileNameIsSet(boolean value) {
    if (!value) {
      this.extendFileName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_VERSION_ID:
      if (value == null) {
        unsetAppVersionId();
      } else {
        setAppVersionId((Long)value);
      }
      break;

    case SYSTEM_TYPE:
      if (value == null) {
        unsetSystemType();
      } else {
        setSystemType((SystemType)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((ByteBuffer)value);
      }
      break;

    case EXTEND_FILE_NAME:
      if (value == null) {
        unsetExtendFileName();
      } else {
        setExtendFileName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_VERSION_ID:
      return Long.valueOf(getAppVersionId());

    case SYSTEM_TYPE:
      return getSystemType();

    case CONTENT:
      return getContent();

    case EXTEND_FILE_NAME:
      return getExtendFileName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_VERSION_ID:
      return isSetAppVersionId();
    case SYSTEM_TYPE:
      return isSetSystemType();
    case CONTENT:
      return isSetContent();
    case EXTEND_FILE_NAME:
      return isSetExtendFileName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppFileUploadInfo)
      return this.equals((AppFileUploadInfo)that);
    return false;
  }

  public boolean equals(AppFileUploadInfo that) {
    if (that == null)
      return false;

    boolean this_present_appVersionId = true && this.isSetAppVersionId();
    boolean that_present_appVersionId = true && that.isSetAppVersionId();
    if (this_present_appVersionId || that_present_appVersionId) {
      if (!(this_present_appVersionId && that_present_appVersionId))
        return false;
      if (this.appVersionId != that.appVersionId)
        return false;
    }

    boolean this_present_systemType = true && this.isSetSystemType();
    boolean that_present_systemType = true && that.isSetSystemType();
    if (this_present_systemType || that_present_systemType) {
      if (!(this_present_systemType && that_present_systemType))
        return false;
      if (!this.systemType.equals(that.systemType))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_extendFileName = true && this.isSetExtendFileName();
    boolean that_present_extendFileName = true && that.isSetExtendFileName();
    if (this_present_extendFileName || that_present_extendFileName) {
      if (!(this_present_extendFileName && that_present_extendFileName))
        return false;
      if (!this.extendFileName.equals(that.extendFileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppFileUploadInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppVersionId()).compareTo(other.isSetAppVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersionId, other.appVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemType()).compareTo(other.isSetSystemType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemType, other.systemType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendFileName()).compareTo(other.isSetExtendFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendFileName, other.extendFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppFileUploadInfo(");
    boolean first = true;

    if (isSetAppVersionId()) {
      sb.append("appVersionId:");
      sb.append(this.appVersionId);
      first = false;
    }
    if (isSetSystemType()) {
      if (!first) sb.append(", ");
      sb.append("systemType:");
      if (this.systemType == null) {
        sb.append("null");
      } else {
        sb.append(this.systemType);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.content, sb);
      }
      first = false;
    }
    if (isSetExtendFileName()) {
      if (!first) sb.append(", ");
      sb.append("extendFileName:");
      if (this.extendFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.extendFileName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppFileUploadInfoStandardSchemeFactory implements SchemeFactory {
    public AppFileUploadInfoStandardScheme getScheme() {
      return new AppFileUploadInfoStandardScheme();
    }
  }

  private static class AppFileUploadInfoStandardScheme extends StandardScheme<AppFileUploadInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppFileUploadInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appVersionId = iprot.readI64();
              struct.setAppVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SYSTEM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.systemType = SystemType.findByValue(iprot.readI32());
              struct.setSystemTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readBinary();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTEND_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extendFileName = iprot.readString();
              struct.setExtendFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppFileUploadInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAppVersionId()) {
        oprot.writeFieldBegin(APP_VERSION_ID_FIELD_DESC);
        oprot.writeI64(struct.appVersionId);
        oprot.writeFieldEnd();
      }
      if (struct.systemType != null) {
        if (struct.isSetSystemType()) {
          oprot.writeFieldBegin(SYSTEM_TYPE_FIELD_DESC);
          oprot.writeI32(struct.systemType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extendFileName != null) {
        if (struct.isSetExtendFileName()) {
          oprot.writeFieldBegin(EXTEND_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.extendFileName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppFileUploadInfoTupleSchemeFactory implements SchemeFactory {
    public AppFileUploadInfoTupleScheme getScheme() {
      return new AppFileUploadInfoTupleScheme();
    }
  }

  private static class AppFileUploadInfoTupleScheme extends TupleScheme<AppFileUploadInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppFileUploadInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppVersionId()) {
        optionals.set(0);
      }
      if (struct.isSetSystemType()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetExtendFileName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAppVersionId()) {
        oprot.writeI64(struct.appVersionId);
      }
      if (struct.isSetSystemType()) {
        oprot.writeI32(struct.systemType.getValue());
      }
      if (struct.isSetContent()) {
        oprot.writeBinary(struct.content);
      }
      if (struct.isSetExtendFileName()) {
        oprot.writeString(struct.extendFileName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppFileUploadInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.appVersionId = iprot.readI64();
        struct.setAppVersionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.systemType = SystemType.findByValue(iprot.readI32());
        struct.setSystemTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readBinary();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.extendFileName = iprot.readString();
        struct.setExtendFileNameIsSet(true);
      }
    }
  }

}

