/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.app.manager.webapi.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientAppVersionReference implements org.apache.thrift.TBase<ClientAppVersionReference, ClientAppVersionReference._Fields>, java.io.Serializable, Cloneable, Comparable<ClientAppVersionReference> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientAppVersionReference");

  private static final org.apache.thrift.protocol.TField APP_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REF_APP_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refAppVersionId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField REF_APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("refAppName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APP_VERSION_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("appVersionTag", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientAppVersionReferenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientAppVersionReferenceTupleSchemeFactory());
  }

  public long appVersionId; // optional
  public long refAppVersionId; // optional
  public String refAppName; // optional
  public List<String> appVersionTag; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_VERSION_ID((short)1, "appVersionId"),
    REF_APP_VERSION_ID((short)2, "refAppVersionId"),
    REF_APP_NAME((short)3, "refAppName"),
    APP_VERSION_TAG((short)4, "appVersionTag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_VERSION_ID
          return APP_VERSION_ID;
        case 2: // REF_APP_VERSION_ID
          return REF_APP_VERSION_ID;
        case 3: // REF_APP_NAME
          return REF_APP_NAME;
        case 4: // APP_VERSION_TAG
          return APP_VERSION_TAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPVERSIONID_ISSET_ID = 0;
  private static final int __REFAPPVERSIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.APP_VERSION_ID,_Fields.REF_APP_VERSION_ID,_Fields.REF_APP_NAME,_Fields.APP_VERSION_TAG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("appVersionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REF_APP_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("refAppVersionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REF_APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("refAppName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_VERSION_TAG, new org.apache.thrift.meta_data.FieldMetaData("appVersionTag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientAppVersionReference.class, metaDataMap);
  }

  public ClientAppVersionReference() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientAppVersionReference(ClientAppVersionReference other) {
    __isset_bitfield = other.__isset_bitfield;
    this.appVersionId = other.appVersionId;
    this.refAppVersionId = other.refAppVersionId;
    if (other.isSetRefAppName()) {
      this.refAppName = other.refAppName;
    }
    if (other.isSetAppVersionTag()) {
      List<String> __this__appVersionTag = new ArrayList<String>(other.appVersionTag);
      this.appVersionTag = __this__appVersionTag;
    }
  }

  public ClientAppVersionReference deepCopy() {
    return new ClientAppVersionReference(this);
  }

  @Override
  public void clear() {
    setAppVersionIdIsSet(false);
    this.appVersionId = 0;
    setRefAppVersionIdIsSet(false);
    this.refAppVersionId = 0;
    this.refAppName = null;
    this.appVersionTag = null;
  }

  public long getAppVersionId() {
    return this.appVersionId;
  }

  public ClientAppVersionReference setAppVersionId(long appVersionId) {
    this.appVersionId = appVersionId;
    setAppVersionIdIsSet(true);
    return this;
  }

  public void unsetAppVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPVERSIONID_ISSET_ID);
  }

  /** Returns true if field appVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPVERSIONID_ISSET_ID);
  }

  public void setAppVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPVERSIONID_ISSET_ID, value);
  }

  public long getRefAppVersionId() {
    return this.refAppVersionId;
  }

  public ClientAppVersionReference setRefAppVersionId(long refAppVersionId) {
    this.refAppVersionId = refAppVersionId;
    setRefAppVersionIdIsSet(true);
    return this;
  }

  public void unsetRefAppVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFAPPVERSIONID_ISSET_ID);
  }

  /** Returns true if field refAppVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefAppVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFAPPVERSIONID_ISSET_ID);
  }

  public void setRefAppVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFAPPVERSIONID_ISSET_ID, value);
  }

  public String getRefAppName() {
    return this.refAppName;
  }

  public ClientAppVersionReference setRefAppName(String refAppName) {
    this.refAppName = refAppName;
    return this;
  }

  public void unsetRefAppName() {
    this.refAppName = null;
  }

  /** Returns true if field refAppName is set (has been assigned a value) and false otherwise */
  public boolean isSetRefAppName() {
    return this.refAppName != null;
  }

  public void setRefAppNameIsSet(boolean value) {
    if (!value) {
      this.refAppName = null;
    }
  }

  public int getAppVersionTagSize() {
    return (this.appVersionTag == null) ? 0 : this.appVersionTag.size();
  }

  public java.util.Iterator<String> getAppVersionTagIterator() {
    return (this.appVersionTag == null) ? null : this.appVersionTag.iterator();
  }

  public void addToAppVersionTag(String elem) {
    if (this.appVersionTag == null) {
      this.appVersionTag = new ArrayList<String>();
    }
    this.appVersionTag.add(elem);
  }

  public List<String> getAppVersionTag() {
    return this.appVersionTag;
  }

  public ClientAppVersionReference setAppVersionTag(List<String> appVersionTag) {
    this.appVersionTag = appVersionTag;
    return this;
  }

  public void unsetAppVersionTag() {
    this.appVersionTag = null;
  }

  /** Returns true if field appVersionTag is set (has been assigned a value) and false otherwise */
  public boolean isSetAppVersionTag() {
    return this.appVersionTag != null;
  }

  public void setAppVersionTagIsSet(boolean value) {
    if (!value) {
      this.appVersionTag = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_VERSION_ID:
      if (value == null) {
        unsetAppVersionId();
      } else {
        setAppVersionId((Long)value);
      }
      break;

    case REF_APP_VERSION_ID:
      if (value == null) {
        unsetRefAppVersionId();
      } else {
        setRefAppVersionId((Long)value);
      }
      break;

    case REF_APP_NAME:
      if (value == null) {
        unsetRefAppName();
      } else {
        setRefAppName((String)value);
      }
      break;

    case APP_VERSION_TAG:
      if (value == null) {
        unsetAppVersionTag();
      } else {
        setAppVersionTag((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_VERSION_ID:
      return Long.valueOf(getAppVersionId());

    case REF_APP_VERSION_ID:
      return Long.valueOf(getRefAppVersionId());

    case REF_APP_NAME:
      return getRefAppName();

    case APP_VERSION_TAG:
      return getAppVersionTag();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_VERSION_ID:
      return isSetAppVersionId();
    case REF_APP_VERSION_ID:
      return isSetRefAppVersionId();
    case REF_APP_NAME:
      return isSetRefAppName();
    case APP_VERSION_TAG:
      return isSetAppVersionTag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientAppVersionReference)
      return this.equals((ClientAppVersionReference)that);
    return false;
  }

  public boolean equals(ClientAppVersionReference that) {
    if (that == null)
      return false;

    boolean this_present_appVersionId = true && this.isSetAppVersionId();
    boolean that_present_appVersionId = true && that.isSetAppVersionId();
    if (this_present_appVersionId || that_present_appVersionId) {
      if (!(this_present_appVersionId && that_present_appVersionId))
        return false;
      if (this.appVersionId != that.appVersionId)
        return false;
    }

    boolean this_present_refAppVersionId = true && this.isSetRefAppVersionId();
    boolean that_present_refAppVersionId = true && that.isSetRefAppVersionId();
    if (this_present_refAppVersionId || that_present_refAppVersionId) {
      if (!(this_present_refAppVersionId && that_present_refAppVersionId))
        return false;
      if (this.refAppVersionId != that.refAppVersionId)
        return false;
    }

    boolean this_present_refAppName = true && this.isSetRefAppName();
    boolean that_present_refAppName = true && that.isSetRefAppName();
    if (this_present_refAppName || that_present_refAppName) {
      if (!(this_present_refAppName && that_present_refAppName))
        return false;
      if (!this.refAppName.equals(that.refAppName))
        return false;
    }

    boolean this_present_appVersionTag = true && this.isSetAppVersionTag();
    boolean that_present_appVersionTag = true && that.isSetAppVersionTag();
    if (this_present_appVersionTag || that_present_appVersionTag) {
      if (!(this_present_appVersionTag && that_present_appVersionTag))
        return false;
      if (!this.appVersionTag.equals(that.appVersionTag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ClientAppVersionReference other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppVersionId()).compareTo(other.isSetAppVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersionId, other.appVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefAppVersionId()).compareTo(other.isSetRefAppVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefAppVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refAppVersionId, other.refAppVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefAppName()).compareTo(other.isSetRefAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refAppName, other.refAppName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppVersionTag()).compareTo(other.isSetAppVersionTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppVersionTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appVersionTag, other.appVersionTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientAppVersionReference(");
    boolean first = true;

    if (isSetAppVersionId()) {
      sb.append("appVersionId:");
      sb.append(this.appVersionId);
      first = false;
    }
    if (isSetRefAppVersionId()) {
      if (!first) sb.append(", ");
      sb.append("refAppVersionId:");
      sb.append(this.refAppVersionId);
      first = false;
    }
    if (isSetRefAppName()) {
      if (!first) sb.append(", ");
      sb.append("refAppName:");
      if (this.refAppName == null) {
        sb.append("null");
      } else {
        sb.append(this.refAppName);
      }
      first = false;
    }
    if (isSetAppVersionTag()) {
      if (!first) sb.append(", ");
      sb.append("appVersionTag:");
      if (this.appVersionTag == null) {
        sb.append("null");
      } else {
        sb.append(this.appVersionTag);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientAppVersionReferenceStandardSchemeFactory implements SchemeFactory {
    public ClientAppVersionReferenceStandardScheme getScheme() {
      return new ClientAppVersionReferenceStandardScheme();
    }
  }

  private static class ClientAppVersionReferenceStandardScheme extends StandardScheme<ClientAppVersionReference> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientAppVersionReference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appVersionId = iprot.readI64();
              struct.setAppVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REF_APP_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refAppVersionId = iprot.readI64();
              struct.setRefAppVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refAppName = iprot.readString();
              struct.setRefAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_VERSION_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.appVersionTag = new ArrayList<String>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  String _elem10;
                  _elem10 = iprot.readString();
                  struct.appVersionTag.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setAppVersionTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientAppVersionReference struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAppVersionId()) {
        oprot.writeFieldBegin(APP_VERSION_ID_FIELD_DESC);
        oprot.writeI64(struct.appVersionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRefAppVersionId()) {
        oprot.writeFieldBegin(REF_APP_VERSION_ID_FIELD_DESC);
        oprot.writeI64(struct.refAppVersionId);
        oprot.writeFieldEnd();
      }
      if (struct.refAppName != null) {
        if (struct.isSetRefAppName()) {
          oprot.writeFieldBegin(REF_APP_NAME_FIELD_DESC);
          oprot.writeString(struct.refAppName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appVersionTag != null) {
        if (struct.isSetAppVersionTag()) {
          oprot.writeFieldBegin(APP_VERSION_TAG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appVersionTag.size()));
            for (String _iter11 : struct.appVersionTag)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientAppVersionReferenceTupleSchemeFactory implements SchemeFactory {
    public ClientAppVersionReferenceTupleScheme getScheme() {
      return new ClientAppVersionReferenceTupleScheme();
    }
  }

  private static class ClientAppVersionReferenceTupleScheme extends TupleScheme<ClientAppVersionReference> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientAppVersionReference struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppVersionId()) {
        optionals.set(0);
      }
      if (struct.isSetRefAppVersionId()) {
        optionals.set(1);
      }
      if (struct.isSetRefAppName()) {
        optionals.set(2);
      }
      if (struct.isSetAppVersionTag()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAppVersionId()) {
        oprot.writeI64(struct.appVersionId);
      }
      if (struct.isSetRefAppVersionId()) {
        oprot.writeI64(struct.refAppVersionId);
      }
      if (struct.isSetRefAppName()) {
        oprot.writeString(struct.refAppName);
      }
      if (struct.isSetAppVersionTag()) {
        {
          oprot.writeI32(struct.appVersionTag.size());
          for (String _iter12 : struct.appVersionTag)
          {
            oprot.writeString(_iter12);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientAppVersionReference struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.appVersionId = iprot.readI64();
        struct.setAppVersionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.refAppVersionId = iprot.readI64();
        struct.setRefAppVersionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refAppName = iprot.readString();
        struct.setRefAppNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appVersionTag = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.appVersionTag.add(_elem15);
          }
        }
        struct.setAppVersionTagIsSet(true);
      }
    }
  }

}

