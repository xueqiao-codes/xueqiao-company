/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.working.order.webapi.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 资金账户工单信息
 */
public class AssetAccountWorkingOrderWebInfo implements org.apache.thrift.TBase<AssetAccountWorkingOrderWebInfo, AssetAccountWorkingOrderWebInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AssetAccountWorkingOrderWebInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssetAccountWorkingOrderWebInfo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField WORKING_ORDER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("workingOrderInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BROKER_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerEntry", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_ACCESS_ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerAccessEntry", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField COMPANY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("companyCode", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssetAccountWorkingOrderWebInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssetAccountWorkingOrderWebInfoTupleSchemeFactory());
  }

  public long orderId; // optional
  public xueqiao.working.order.thriftapi.AssetAccountWorkingOrder workingOrderInfo; // optional
  public String userName; // optional
  public com.longsheng.xueqiao.broker.thriftapi.BrokerEntry brokerEntry; // optional
  public com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry brokerAccessEntry; // optional
  public String companyCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    WORKING_ORDER_INFO((short)2, "workingOrderInfo"),
    USER_NAME((short)3, "userName"),
    BROKER_ENTRY((short)4, "brokerEntry"),
    BROKER_ACCESS_ENTRY((short)5, "brokerAccessEntry"),
    COMPANY_CODE((short)6, "companyCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // WORKING_ORDER_INFO
          return WORKING_ORDER_INFO;
        case 3: // USER_NAME
          return USER_NAME;
        case 4: // BROKER_ENTRY
          return BROKER_ENTRY;
        case 5: // BROKER_ACCESS_ENTRY
          return BROKER_ACCESS_ENTRY;
        case 6: // COMPANY_CODE
          return COMPANY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ID,_Fields.WORKING_ORDER_INFO,_Fields.USER_NAME,_Fields.BROKER_ENTRY,_Fields.BROKER_ACCESS_ENTRY,_Fields.COMPANY_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WORKING_ORDER_INFO, new org.apache.thrift.meta_data.FieldMetaData("workingOrderInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.working.order.thriftapi.AssetAccountWorkingOrder.class)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("brokerEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.longsheng.xueqiao.broker.thriftapi.BrokerEntry.class)));
    tmpMap.put(_Fields.BROKER_ACCESS_ENTRY, new org.apache.thrift.meta_data.FieldMetaData("brokerAccessEntry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry.class)));
    tmpMap.put(_Fields.COMPANY_CODE, new org.apache.thrift.meta_data.FieldMetaData("companyCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssetAccountWorkingOrderWebInfo.class, metaDataMap);
  }

  public AssetAccountWorkingOrderWebInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssetAccountWorkingOrderWebInfo(AssetAccountWorkingOrderWebInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderId = other.orderId;
    if (other.isSetWorkingOrderInfo()) {
      this.workingOrderInfo = new xueqiao.working.order.thriftapi.AssetAccountWorkingOrder(other.workingOrderInfo);
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetBrokerEntry()) {
      this.brokerEntry = new com.longsheng.xueqiao.broker.thriftapi.BrokerEntry(other.brokerEntry);
    }
    if (other.isSetBrokerAccessEntry()) {
      this.brokerAccessEntry = new com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry(other.brokerAccessEntry);
    }
    if (other.isSetCompanyCode()) {
      this.companyCode = other.companyCode;
    }
  }

  public AssetAccountWorkingOrderWebInfo deepCopy() {
    return new AssetAccountWorkingOrderWebInfo(this);
  }

  @Override
  public void clear() {
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.workingOrderInfo = null;
    this.userName = null;
    this.brokerEntry = null;
    this.brokerAccessEntry = null;
    this.companyCode = null;
  }

  public long getOrderId() {
    return this.orderId;
  }

  public AssetAccountWorkingOrderWebInfo setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public xueqiao.working.order.thriftapi.AssetAccountWorkingOrder getWorkingOrderInfo() {
    return this.workingOrderInfo;
  }

  public AssetAccountWorkingOrderWebInfo setWorkingOrderInfo(xueqiao.working.order.thriftapi.AssetAccountWorkingOrder workingOrderInfo) {
    this.workingOrderInfo = workingOrderInfo;
    return this;
  }

  public void unsetWorkingOrderInfo() {
    this.workingOrderInfo = null;
  }

  /** Returns true if field workingOrderInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingOrderInfo() {
    return this.workingOrderInfo != null;
  }

  public void setWorkingOrderInfoIsSet(boolean value) {
    if (!value) {
      this.workingOrderInfo = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public AssetAccountWorkingOrderWebInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public com.longsheng.xueqiao.broker.thriftapi.BrokerEntry getBrokerEntry() {
    return this.brokerEntry;
  }

  public AssetAccountWorkingOrderWebInfo setBrokerEntry(com.longsheng.xueqiao.broker.thriftapi.BrokerEntry brokerEntry) {
    this.brokerEntry = brokerEntry;
    return this;
  }

  public void unsetBrokerEntry() {
    this.brokerEntry = null;
  }

  /** Returns true if field brokerEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerEntry() {
    return this.brokerEntry != null;
  }

  public void setBrokerEntryIsSet(boolean value) {
    if (!value) {
      this.brokerEntry = null;
    }
  }

  public com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry getBrokerAccessEntry() {
    return this.brokerAccessEntry;
  }

  public AssetAccountWorkingOrderWebInfo setBrokerAccessEntry(com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry brokerAccessEntry) {
    this.brokerAccessEntry = brokerAccessEntry;
    return this;
  }

  public void unsetBrokerAccessEntry() {
    this.brokerAccessEntry = null;
  }

  /** Returns true if field brokerAccessEntry is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerAccessEntry() {
    return this.brokerAccessEntry != null;
  }

  public void setBrokerAccessEntryIsSet(boolean value) {
    if (!value) {
      this.brokerAccessEntry = null;
    }
  }

  public String getCompanyCode() {
    return this.companyCode;
  }

  public AssetAccountWorkingOrderWebInfo setCompanyCode(String companyCode) {
    this.companyCode = companyCode;
    return this;
  }

  public void unsetCompanyCode() {
    this.companyCode = null;
  }

  /** Returns true if field companyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyCode() {
    return this.companyCode != null;
  }

  public void setCompanyCodeIsSet(boolean value) {
    if (!value) {
      this.companyCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case WORKING_ORDER_INFO:
      if (value == null) {
        unsetWorkingOrderInfo();
      } else {
        setWorkingOrderInfo((xueqiao.working.order.thriftapi.AssetAccountWorkingOrder)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case BROKER_ENTRY:
      if (value == null) {
        unsetBrokerEntry();
      } else {
        setBrokerEntry((com.longsheng.xueqiao.broker.thriftapi.BrokerEntry)value);
      }
      break;

    case BROKER_ACCESS_ENTRY:
      if (value == null) {
        unsetBrokerAccessEntry();
      } else {
        setBrokerAccessEntry((com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry)value);
      }
      break;

    case COMPANY_CODE:
      if (value == null) {
        unsetCompanyCode();
      } else {
        setCompanyCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return Long.valueOf(getOrderId());

    case WORKING_ORDER_INFO:
      return getWorkingOrderInfo();

    case USER_NAME:
      return getUserName();

    case BROKER_ENTRY:
      return getBrokerEntry();

    case BROKER_ACCESS_ENTRY:
      return getBrokerAccessEntry();

    case COMPANY_CODE:
      return getCompanyCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case WORKING_ORDER_INFO:
      return isSetWorkingOrderInfo();
    case USER_NAME:
      return isSetUserName();
    case BROKER_ENTRY:
      return isSetBrokerEntry();
    case BROKER_ACCESS_ENTRY:
      return isSetBrokerAccessEntry();
    case COMPANY_CODE:
      return isSetCompanyCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AssetAccountWorkingOrderWebInfo)
      return this.equals((AssetAccountWorkingOrderWebInfo)that);
    return false;
  }

  public boolean equals(AssetAccountWorkingOrderWebInfo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_workingOrderInfo = true && this.isSetWorkingOrderInfo();
    boolean that_present_workingOrderInfo = true && that.isSetWorkingOrderInfo();
    if (this_present_workingOrderInfo || that_present_workingOrderInfo) {
      if (!(this_present_workingOrderInfo && that_present_workingOrderInfo))
        return false;
      if (!this.workingOrderInfo.equals(that.workingOrderInfo))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_brokerEntry = true && this.isSetBrokerEntry();
    boolean that_present_brokerEntry = true && that.isSetBrokerEntry();
    if (this_present_brokerEntry || that_present_brokerEntry) {
      if (!(this_present_brokerEntry && that_present_brokerEntry))
        return false;
      if (!this.brokerEntry.equals(that.brokerEntry))
        return false;
    }

    boolean this_present_brokerAccessEntry = true && this.isSetBrokerAccessEntry();
    boolean that_present_brokerAccessEntry = true && that.isSetBrokerAccessEntry();
    if (this_present_brokerAccessEntry || that_present_brokerAccessEntry) {
      if (!(this_present_brokerAccessEntry && that_present_brokerAccessEntry))
        return false;
      if (!this.brokerAccessEntry.equals(that.brokerAccessEntry))
        return false;
    }

    boolean this_present_companyCode = true && this.isSetCompanyCode();
    boolean that_present_companyCode = true && that.isSetCompanyCode();
    if (this_present_companyCode || that_present_companyCode) {
      if (!(this_present_companyCode && that_present_companyCode))
        return false;
      if (!this.companyCode.equals(that.companyCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AssetAccountWorkingOrderWebInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingOrderInfo()).compareTo(other.isSetWorkingOrderInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingOrderInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingOrderInfo, other.workingOrderInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerEntry()).compareTo(other.isSetBrokerEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerEntry, other.brokerEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerAccessEntry()).compareTo(other.isSetBrokerAccessEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerAccessEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerAccessEntry, other.brokerAccessEntry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyCode()).compareTo(other.isSetCompanyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyCode, other.companyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AssetAccountWorkingOrderWebInfo(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetWorkingOrderInfo()) {
      if (!first) sb.append(", ");
      sb.append("workingOrderInfo:");
      if (this.workingOrderInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.workingOrderInfo);
      }
      first = false;
    }
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetBrokerEntry()) {
      if (!first) sb.append(", ");
      sb.append("brokerEntry:");
      if (this.brokerEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerEntry);
      }
      first = false;
    }
    if (isSetBrokerAccessEntry()) {
      if (!first) sb.append(", ");
      sb.append("brokerAccessEntry:");
      if (this.brokerAccessEntry == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerAccessEntry);
      }
      first = false;
    }
    if (isSetCompanyCode()) {
      if (!first) sb.append(", ");
      sb.append("companyCode:");
      if (this.companyCode == null) {
        sb.append("null");
      } else {
        sb.append(this.companyCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (workingOrderInfo != null) {
      workingOrderInfo.validate();
    }
    if (brokerEntry != null) {
      brokerEntry.validate();
    }
    if (brokerAccessEntry != null) {
      brokerAccessEntry.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssetAccountWorkingOrderWebInfoStandardSchemeFactory implements SchemeFactory {
    public AssetAccountWorkingOrderWebInfoStandardScheme getScheme() {
      return new AssetAccountWorkingOrderWebInfoStandardScheme();
    }
  }

  private static class AssetAccountWorkingOrderWebInfoStandardScheme extends StandardScheme<AssetAccountWorkingOrderWebInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssetAccountWorkingOrderWebInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKING_ORDER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workingOrderInfo = new xueqiao.working.order.thriftapi.AssetAccountWorkingOrder();
              struct.workingOrderInfo.read(iprot);
              struct.setWorkingOrderInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BROKER_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.brokerEntry = new com.longsheng.xueqiao.broker.thriftapi.BrokerEntry();
              struct.brokerEntry.read(iprot);
              struct.setBrokerEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_ACCESS_ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.brokerAccessEntry = new com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry();
              struct.brokerAccessEntry.read(iprot);
              struct.setBrokerAccessEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPANY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyCode = iprot.readString();
              struct.setCompanyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssetAccountWorkingOrderWebInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.workingOrderInfo != null) {
        if (struct.isSetWorkingOrderInfo()) {
          oprot.writeFieldBegin(WORKING_ORDER_INFO_FIELD_DESC);
          struct.workingOrderInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brokerEntry != null) {
        if (struct.isSetBrokerEntry()) {
          oprot.writeFieldBegin(BROKER_ENTRY_FIELD_DESC);
          struct.brokerEntry.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.brokerAccessEntry != null) {
        if (struct.isSetBrokerAccessEntry()) {
          oprot.writeFieldBegin(BROKER_ACCESS_ENTRY_FIELD_DESC);
          struct.brokerAccessEntry.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyCode != null) {
        if (struct.isSetCompanyCode()) {
          oprot.writeFieldBegin(COMPANY_CODE_FIELD_DESC);
          oprot.writeString(struct.companyCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssetAccountWorkingOrderWebInfoTupleSchemeFactory implements SchemeFactory {
    public AssetAccountWorkingOrderWebInfoTupleScheme getScheme() {
      return new AssetAccountWorkingOrderWebInfoTupleScheme();
    }
  }

  private static class AssetAccountWorkingOrderWebInfoTupleScheme extends TupleScheme<AssetAccountWorkingOrderWebInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssetAccountWorkingOrderWebInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetWorkingOrderInfo()) {
        optionals.set(1);
      }
      if (struct.isSetUserName()) {
        optionals.set(2);
      }
      if (struct.isSetBrokerEntry()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerAccessEntry()) {
        optionals.set(4);
      }
      if (struct.isSetCompanyCode()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetWorkingOrderInfo()) {
        struct.workingOrderInfo.write(oprot);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetBrokerEntry()) {
        struct.brokerEntry.write(oprot);
      }
      if (struct.isSetBrokerAccessEntry()) {
        struct.brokerAccessEntry.write(oprot);
      }
      if (struct.isSetCompanyCode()) {
        oprot.writeString(struct.companyCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssetAccountWorkingOrderWebInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.workingOrderInfo = new xueqiao.working.order.thriftapi.AssetAccountWorkingOrder();
        struct.workingOrderInfo.read(iprot);
        struct.setWorkingOrderInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.brokerEntry = new com.longsheng.xueqiao.broker.thriftapi.BrokerEntry();
        struct.brokerEntry.read(iprot);
        struct.setBrokerEntryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerAccessEntry = new com.longsheng.xueqiao.broker.thriftapi.BrokerAccessEntry();
        struct.brokerAccessEntry.read(iprot);
        struct.setBrokerAccessEntryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.companyCode = iprot.readString();
        struct.setCompanyCodeIsSet(true);
      }
    }
  }

}

