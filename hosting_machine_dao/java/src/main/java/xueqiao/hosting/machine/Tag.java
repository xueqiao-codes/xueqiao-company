/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Tag implements org.apache.thrift.TBase<Tag, Tag._Fields>, java.io.Serializable, Cloneable, Comparable<Tag> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tag");

  private static final org.apache.thrift.protocol.TField TAG_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tagKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("tagValue", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagTupleSchemeFactory());
  }

  public String tagKey; // optional
  public String tagValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_KEY((short)1, "tagKey"),
    TAG_VALUE((short)2, "tagValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_KEY
          return TAG_KEY;
        case 2: // TAG_VALUE
          return TAG_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TAG_KEY,_Fields.TAG_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_KEY, new org.apache.thrift.meta_data.FieldMetaData("tagKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("tagValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tag.class, metaDataMap);
  }

  public Tag() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tag(Tag other) {
    if (other.isSetTagKey()) {
      this.tagKey = other.tagKey;
    }
    if (other.isSetTagValue()) {
      this.tagValue = other.tagValue;
    }
  }

  public Tag deepCopy() {
    return new Tag(this);
  }

  @Override
  public void clear() {
    this.tagKey = null;
    this.tagValue = null;
  }

  public String getTagKey() {
    return this.tagKey;
  }

  public Tag setTagKey(String tagKey) {
    this.tagKey = tagKey;
    return this;
  }

  public void unsetTagKey() {
    this.tagKey = null;
  }

  /** Returns true if field tagKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTagKey() {
    return this.tagKey != null;
  }

  public void setTagKeyIsSet(boolean value) {
    if (!value) {
      this.tagKey = null;
    }
  }

  public String getTagValue() {
    return this.tagValue;
  }

  public Tag setTagValue(String tagValue) {
    this.tagValue = tagValue;
    return this;
  }

  public void unsetTagValue() {
    this.tagValue = null;
  }

  /** Returns true if field tagValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTagValue() {
    return this.tagValue != null;
  }

  public void setTagValueIsSet(boolean value) {
    if (!value) {
      this.tagValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_KEY:
      if (value == null) {
        unsetTagKey();
      } else {
        setTagKey((String)value);
      }
      break;

    case TAG_VALUE:
      if (value == null) {
        unsetTagValue();
      } else {
        setTagValue((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_KEY:
      return getTagKey();

    case TAG_VALUE:
      return getTagValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_KEY:
      return isSetTagKey();
    case TAG_VALUE:
      return isSetTagValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tag)
      return this.equals((Tag)that);
    return false;
  }

  public boolean equals(Tag that) {
    if (that == null)
      return false;

    boolean this_present_tagKey = true && this.isSetTagKey();
    boolean that_present_tagKey = true && that.isSetTagKey();
    if (this_present_tagKey || that_present_tagKey) {
      if (!(this_present_tagKey && that_present_tagKey))
        return false;
      if (!this.tagKey.equals(that.tagKey))
        return false;
    }

    boolean this_present_tagValue = true && this.isSetTagValue();
    boolean that_present_tagValue = true && that.isSetTagValue();
    if (this_present_tagValue || that_present_tagValue) {
      if (!(this_present_tagValue && that_present_tagValue))
        return false;
      if (!this.tagValue.equals(that.tagValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Tag other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagKey()).compareTo(other.isSetTagKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagKey, other.tagKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagValue()).compareTo(other.isSetTagValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagValue, other.tagValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tag(");
    boolean first = true;

    if (isSetTagKey()) {
      sb.append("tagKey:");
      if (this.tagKey == null) {
        sb.append("null");
      } else {
        sb.append(this.tagKey);
      }
      first = false;
    }
    if (isSetTagValue()) {
      if (!first) sb.append(", ");
      sb.append("tagValue:");
      if (this.tagValue == null) {
        sb.append("null");
      } else {
        sb.append(this.tagValue);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagStandardSchemeFactory implements SchemeFactory {
    public TagStandardScheme getScheme() {
      return new TagStandardScheme();
    }
  }

  private static class TagStandardScheme extends StandardScheme<Tag> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tag struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagKey = iprot.readString();
              struct.setTagKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagValue = iprot.readString();
              struct.setTagValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tag struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tagKey != null) {
        if (struct.isSetTagKey()) {
          oprot.writeFieldBegin(TAG_KEY_FIELD_DESC);
          oprot.writeString(struct.tagKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagValue != null) {
        if (struct.isSetTagValue()) {
          oprot.writeFieldBegin(TAG_VALUE_FIELD_DESC);
          oprot.writeString(struct.tagValue);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagTupleSchemeFactory implements SchemeFactory {
    public TagTupleScheme getScheme() {
      return new TagTupleScheme();
    }
  }

  private static class TagTupleScheme extends TupleScheme<Tag> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tag struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTagKey()) {
        optionals.set(0);
      }
      if (struct.isSetTagValue()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTagKey()) {
        oprot.writeString(struct.tagKey);
      }
      if (struct.isSetTagValue()) {
        oprot.writeString(struct.tagValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tag struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.tagKey = iprot.readString();
        struct.setTagKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tagValue = iprot.readString();
        struct.setTagValueIsSet(true);
      }
    }
  }

}

