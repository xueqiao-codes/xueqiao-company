/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryAliyunInstanceOption implements org.apache.thrift.TBase<QueryAliyunInstanceOption, QueryAliyunInstanceOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryAliyunInstanceOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryAliyunInstanceOption");

  private static final org.apache.thrift.protocol.TField INSTANCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField INCLUDE_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("includeDeleted", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryAliyunInstanceOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryAliyunInstanceOptionTupleSchemeFactory());
  }

  public List<String> instanceIds; // optional
  public boolean includeDeleted; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_IDS((short)1, "instanceIds"),
    INCLUDE_DELETED((short)2, "includeDeleted");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_IDS
          return INSTANCE_IDS;
        case 2: // INCLUDE_DELETED
          return INCLUDE_DELETED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCLUDEDELETED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTANCE_IDS,_Fields.INCLUDE_DELETED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("instanceIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INCLUDE_DELETED, new org.apache.thrift.meta_data.FieldMetaData("includeDeleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryAliyunInstanceOption.class, metaDataMap);
  }

  public QueryAliyunInstanceOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryAliyunInstanceOption(QueryAliyunInstanceOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstanceIds()) {
      List<String> __this__instanceIds = new ArrayList<String>(other.instanceIds);
      this.instanceIds = __this__instanceIds;
    }
    this.includeDeleted = other.includeDeleted;
  }

  public QueryAliyunInstanceOption deepCopy() {
    return new QueryAliyunInstanceOption(this);
  }

  @Override
  public void clear() {
    this.instanceIds = null;
    setIncludeDeletedIsSet(false);
    this.includeDeleted = false;
  }

  public int getInstanceIdsSize() {
    return (this.instanceIds == null) ? 0 : this.instanceIds.size();
  }

  public java.util.Iterator<String> getInstanceIdsIterator() {
    return (this.instanceIds == null) ? null : this.instanceIds.iterator();
  }

  public void addToInstanceIds(String elem) {
    if (this.instanceIds == null) {
      this.instanceIds = new ArrayList<String>();
    }
    this.instanceIds.add(elem);
  }

  public List<String> getInstanceIds() {
    return this.instanceIds;
  }

  public QueryAliyunInstanceOption setInstanceIds(List<String> instanceIds) {
    this.instanceIds = instanceIds;
    return this;
  }

  public void unsetInstanceIds() {
    this.instanceIds = null;
  }

  /** Returns true if field instanceIds is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceIds() {
    return this.instanceIds != null;
  }

  public void setInstanceIdsIsSet(boolean value) {
    if (!value) {
      this.instanceIds = null;
    }
  }

  public boolean isIncludeDeleted() {
    return this.includeDeleted;
  }

  public QueryAliyunInstanceOption setIncludeDeleted(boolean includeDeleted) {
    this.includeDeleted = includeDeleted;
    setIncludeDeletedIsSet(true);
    return this;
  }

  public void unsetIncludeDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEDELETED_ISSET_ID);
  }

  /** Returns true if field includeDeleted is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEDELETED_ISSET_ID);
  }

  public void setIncludeDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEDELETED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_IDS:
      if (value == null) {
        unsetInstanceIds();
      } else {
        setInstanceIds((List<String>)value);
      }
      break;

    case INCLUDE_DELETED:
      if (value == null) {
        unsetIncludeDeleted();
      } else {
        setIncludeDeleted((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_IDS:
      return getInstanceIds();

    case INCLUDE_DELETED:
      return Boolean.valueOf(isIncludeDeleted());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_IDS:
      return isSetInstanceIds();
    case INCLUDE_DELETED:
      return isSetIncludeDeleted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryAliyunInstanceOption)
      return this.equals((QueryAliyunInstanceOption)that);
    return false;
  }

  public boolean equals(QueryAliyunInstanceOption that) {
    if (that == null)
      return false;

    boolean this_present_instanceIds = true && this.isSetInstanceIds();
    boolean that_present_instanceIds = true && that.isSetInstanceIds();
    if (this_present_instanceIds || that_present_instanceIds) {
      if (!(this_present_instanceIds && that_present_instanceIds))
        return false;
      if (!this.instanceIds.equals(that.instanceIds))
        return false;
    }

    boolean this_present_includeDeleted = true && this.isSetIncludeDeleted();
    boolean that_present_includeDeleted = true && that.isSetIncludeDeleted();
    if (this_present_includeDeleted || that_present_includeDeleted) {
      if (!(this_present_includeDeleted && that_present_includeDeleted))
        return false;
      if (this.includeDeleted != that.includeDeleted)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryAliyunInstanceOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstanceIds()).compareTo(other.isSetInstanceIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceIds, other.instanceIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeDeleted()).compareTo(other.isSetIncludeDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeDeleted, other.includeDeleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryAliyunInstanceOption(");
    boolean first = true;

    if (isSetInstanceIds()) {
      sb.append("instanceIds:");
      if (this.instanceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceIds);
      }
      first = false;
    }
    if (isSetIncludeDeleted()) {
      if (!first) sb.append(", ");
      sb.append("includeDeleted:");
      sb.append(this.includeDeleted);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryAliyunInstanceOptionStandardSchemeFactory implements SchemeFactory {
    public QueryAliyunInstanceOptionStandardScheme getScheme() {
      return new QueryAliyunInstanceOptionStandardScheme();
    }
  }

  private static class QueryAliyunInstanceOptionStandardScheme extends StandardScheme<QueryAliyunInstanceOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryAliyunInstanceOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.instanceIds = new ArrayList<String>(_list184.size);
                for (int _i185 = 0; _i185 < _list184.size; ++_i185)
                {
                  String _elem186;
                  _elem186 = iprot.readString();
                  struct.instanceIds.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setInstanceIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCLUDE_DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.includeDeleted = iprot.readBool();
              struct.setIncludeDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryAliyunInstanceOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instanceIds != null) {
        if (struct.isSetInstanceIds()) {
          oprot.writeFieldBegin(INSTANCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.instanceIds.size()));
            for (String _iter187 : struct.instanceIds)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIncludeDeleted()) {
        oprot.writeFieldBegin(INCLUDE_DELETED_FIELD_DESC);
        oprot.writeBool(struct.includeDeleted);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryAliyunInstanceOptionTupleSchemeFactory implements SchemeFactory {
    public QueryAliyunInstanceOptionTupleScheme getScheme() {
      return new QueryAliyunInstanceOptionTupleScheme();
    }
  }

  private static class QueryAliyunInstanceOptionTupleScheme extends TupleScheme<QueryAliyunInstanceOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryAliyunInstanceOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstanceIds()) {
        optionals.set(0);
      }
      if (struct.isSetIncludeDeleted()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetInstanceIds()) {
        {
          oprot.writeI32(struct.instanceIds.size());
          for (String _iter188 : struct.instanceIds)
          {
            oprot.writeString(_iter188);
          }
        }
      }
      if (struct.isSetIncludeDeleted()) {
        oprot.writeBool(struct.includeDeleted);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryAliyunInstanceOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.instanceIds = new ArrayList<String>(_list189.size);
          for (int _i190 = 0; _i190 < _list189.size; ++_i190)
          {
            String _elem191;
            _elem191 = iprot.readString();
            struct.instanceIds.add(_elem191);
          }
        }
        struct.setInstanceIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.includeDeleted = iprot.readBool();
        struct.setIncludeDeletedIsSet(true);
      }
    }
  }

}

