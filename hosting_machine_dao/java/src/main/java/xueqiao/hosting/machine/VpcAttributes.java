/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class VpcAttributes implements org.apache.thrift.TBase<VpcAttributes, VpcAttributes._Fields>, java.io.Serializable, Cloneable, Comparable<VpcAttributes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VpcAttributes");

  private static final org.apache.thrift.protocol.TField VPC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vpcId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField V_SWITCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vSwitchId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAT_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("natIpAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRIVATE_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("privateIpAddress", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VpcAttributesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VpcAttributesTupleSchemeFactory());
  }

  public String vpcId; // optional
  public String vSwitchId; // optional
  public String natIpAddress; // optional
  public List<String> privateIpAddress; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VPC_ID((short)1, "vpcId"),
    V_SWITCH_ID((short)2, "vSwitchId"),
    NAT_IP_ADDRESS((short)3, "natIpAddress"),
    PRIVATE_IP_ADDRESS((short)4, "privateIpAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VPC_ID
          return VPC_ID;
        case 2: // V_SWITCH_ID
          return V_SWITCH_ID;
        case 3: // NAT_IP_ADDRESS
          return NAT_IP_ADDRESS;
        case 4: // PRIVATE_IP_ADDRESS
          return PRIVATE_IP_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.VPC_ID,_Fields.V_SWITCH_ID,_Fields.NAT_IP_ADDRESS,_Fields.PRIVATE_IP_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VPC_ID, new org.apache.thrift.meta_data.FieldMetaData("vpcId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_SWITCH_ID, new org.apache.thrift.meta_data.FieldMetaData("vSwitchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAT_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("natIpAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVATE_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("privateIpAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VpcAttributes.class, metaDataMap);
  }

  public VpcAttributes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VpcAttributes(VpcAttributes other) {
    if (other.isSetVpcId()) {
      this.vpcId = other.vpcId;
    }
    if (other.isSetVSwitchId()) {
      this.vSwitchId = other.vSwitchId;
    }
    if (other.isSetNatIpAddress()) {
      this.natIpAddress = other.natIpAddress;
    }
    if (other.isSetPrivateIpAddress()) {
      List<String> __this__privateIpAddress = new ArrayList<String>(other.privateIpAddress);
      this.privateIpAddress = __this__privateIpAddress;
    }
  }

  public VpcAttributes deepCopy() {
    return new VpcAttributes(this);
  }

  @Override
  public void clear() {
    this.vpcId = null;
    this.vSwitchId = null;
    this.natIpAddress = null;
    this.privateIpAddress = null;
  }

  public String getVpcId() {
    return this.vpcId;
  }

  public VpcAttributes setVpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  public void unsetVpcId() {
    this.vpcId = null;
  }

  /** Returns true if field vpcId is set (has been assigned a value) and false otherwise */
  public boolean isSetVpcId() {
    return this.vpcId != null;
  }

  public void setVpcIdIsSet(boolean value) {
    if (!value) {
      this.vpcId = null;
    }
  }

  public String getVSwitchId() {
    return this.vSwitchId;
  }

  public VpcAttributes setVSwitchId(String vSwitchId) {
    this.vSwitchId = vSwitchId;
    return this;
  }

  public void unsetVSwitchId() {
    this.vSwitchId = null;
  }

  /** Returns true if field vSwitchId is set (has been assigned a value) and false otherwise */
  public boolean isSetVSwitchId() {
    return this.vSwitchId != null;
  }

  public void setVSwitchIdIsSet(boolean value) {
    if (!value) {
      this.vSwitchId = null;
    }
  }

  public String getNatIpAddress() {
    return this.natIpAddress;
  }

  public VpcAttributes setNatIpAddress(String natIpAddress) {
    this.natIpAddress = natIpAddress;
    return this;
  }

  public void unsetNatIpAddress() {
    this.natIpAddress = null;
  }

  /** Returns true if field natIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetNatIpAddress() {
    return this.natIpAddress != null;
  }

  public void setNatIpAddressIsSet(boolean value) {
    if (!value) {
      this.natIpAddress = null;
    }
  }

  public int getPrivateIpAddressSize() {
    return (this.privateIpAddress == null) ? 0 : this.privateIpAddress.size();
  }

  public java.util.Iterator<String> getPrivateIpAddressIterator() {
    return (this.privateIpAddress == null) ? null : this.privateIpAddress.iterator();
  }

  public void addToPrivateIpAddress(String elem) {
    if (this.privateIpAddress == null) {
      this.privateIpAddress = new ArrayList<String>();
    }
    this.privateIpAddress.add(elem);
  }

  public List<String> getPrivateIpAddress() {
    return this.privateIpAddress;
  }

  public VpcAttributes setPrivateIpAddress(List<String> privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
    return this;
  }

  public void unsetPrivateIpAddress() {
    this.privateIpAddress = null;
  }

  /** Returns true if field privateIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivateIpAddress() {
    return this.privateIpAddress != null;
  }

  public void setPrivateIpAddressIsSet(boolean value) {
    if (!value) {
      this.privateIpAddress = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VPC_ID:
      if (value == null) {
        unsetVpcId();
      } else {
        setVpcId((String)value);
      }
      break;

    case V_SWITCH_ID:
      if (value == null) {
        unsetVSwitchId();
      } else {
        setVSwitchId((String)value);
      }
      break;

    case NAT_IP_ADDRESS:
      if (value == null) {
        unsetNatIpAddress();
      } else {
        setNatIpAddress((String)value);
      }
      break;

    case PRIVATE_IP_ADDRESS:
      if (value == null) {
        unsetPrivateIpAddress();
      } else {
        setPrivateIpAddress((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VPC_ID:
      return getVpcId();

    case V_SWITCH_ID:
      return getVSwitchId();

    case NAT_IP_ADDRESS:
      return getNatIpAddress();

    case PRIVATE_IP_ADDRESS:
      return getPrivateIpAddress();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VPC_ID:
      return isSetVpcId();
    case V_SWITCH_ID:
      return isSetVSwitchId();
    case NAT_IP_ADDRESS:
      return isSetNatIpAddress();
    case PRIVATE_IP_ADDRESS:
      return isSetPrivateIpAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VpcAttributes)
      return this.equals((VpcAttributes)that);
    return false;
  }

  public boolean equals(VpcAttributes that) {
    if (that == null)
      return false;

    boolean this_present_vpcId = true && this.isSetVpcId();
    boolean that_present_vpcId = true && that.isSetVpcId();
    if (this_present_vpcId || that_present_vpcId) {
      if (!(this_present_vpcId && that_present_vpcId))
        return false;
      if (!this.vpcId.equals(that.vpcId))
        return false;
    }

    boolean this_present_vSwitchId = true && this.isSetVSwitchId();
    boolean that_present_vSwitchId = true && that.isSetVSwitchId();
    if (this_present_vSwitchId || that_present_vSwitchId) {
      if (!(this_present_vSwitchId && that_present_vSwitchId))
        return false;
      if (!this.vSwitchId.equals(that.vSwitchId))
        return false;
    }

    boolean this_present_natIpAddress = true && this.isSetNatIpAddress();
    boolean that_present_natIpAddress = true && that.isSetNatIpAddress();
    if (this_present_natIpAddress || that_present_natIpAddress) {
      if (!(this_present_natIpAddress && that_present_natIpAddress))
        return false;
      if (!this.natIpAddress.equals(that.natIpAddress))
        return false;
    }

    boolean this_present_privateIpAddress = true && this.isSetPrivateIpAddress();
    boolean that_present_privateIpAddress = true && that.isSetPrivateIpAddress();
    if (this_present_privateIpAddress || that_present_privateIpAddress) {
      if (!(this_present_privateIpAddress && that_present_privateIpAddress))
        return false;
      if (!this.privateIpAddress.equals(that.privateIpAddress))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(VpcAttributes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVpcId()).compareTo(other.isSetVpcId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpcId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpcId, other.vpcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVSwitchId()).compareTo(other.isSetVSwitchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVSwitchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vSwitchId, other.vSwitchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNatIpAddress()).compareTo(other.isSetNatIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNatIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.natIpAddress, other.natIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrivateIpAddress()).compareTo(other.isSetPrivateIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivateIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateIpAddress, other.privateIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VpcAttributes(");
    boolean first = true;

    if (isSetVpcId()) {
      sb.append("vpcId:");
      if (this.vpcId == null) {
        sb.append("null");
      } else {
        sb.append(this.vpcId);
      }
      first = false;
    }
    if (isSetVSwitchId()) {
      if (!first) sb.append(", ");
      sb.append("vSwitchId:");
      if (this.vSwitchId == null) {
        sb.append("null");
      } else {
        sb.append(this.vSwitchId);
      }
      first = false;
    }
    if (isSetNatIpAddress()) {
      if (!first) sb.append(", ");
      sb.append("natIpAddress:");
      if (this.natIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.natIpAddress);
      }
      first = false;
    }
    if (isSetPrivateIpAddress()) {
      if (!first) sb.append(", ");
      sb.append("privateIpAddress:");
      if (this.privateIpAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.privateIpAddress);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VpcAttributesStandardSchemeFactory implements SchemeFactory {
    public VpcAttributesStandardScheme getScheme() {
      return new VpcAttributesStandardScheme();
    }
  }

  private static class VpcAttributesStandardScheme extends StandardScheme<VpcAttributes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VpcAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VPC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vpcId = iprot.readString();
              struct.setVpcIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // V_SWITCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vSwitchId = iprot.readString();
              struct.setVSwitchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAT_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.natIpAddress = iprot.readString();
              struct.setNatIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIVATE_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.privateIpAddress = new ArrayList<String>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  String _elem42;
                  _elem42 = iprot.readString();
                  struct.privateIpAddress.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setPrivateIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VpcAttributes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vpcId != null) {
        if (struct.isSetVpcId()) {
          oprot.writeFieldBegin(VPC_ID_FIELD_DESC);
          oprot.writeString(struct.vpcId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.vSwitchId != null) {
        if (struct.isSetVSwitchId()) {
          oprot.writeFieldBegin(V_SWITCH_ID_FIELD_DESC);
          oprot.writeString(struct.vSwitchId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.natIpAddress != null) {
        if (struct.isSetNatIpAddress()) {
          oprot.writeFieldBegin(NAT_IP_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.natIpAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.privateIpAddress != null) {
        if (struct.isSetPrivateIpAddress()) {
          oprot.writeFieldBegin(PRIVATE_IP_ADDRESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.privateIpAddress.size()));
            for (String _iter43 : struct.privateIpAddress)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VpcAttributesTupleSchemeFactory implements SchemeFactory {
    public VpcAttributesTupleScheme getScheme() {
      return new VpcAttributesTupleScheme();
    }
  }

  private static class VpcAttributesTupleScheme extends TupleScheme<VpcAttributes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VpcAttributes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVpcId()) {
        optionals.set(0);
      }
      if (struct.isSetVSwitchId()) {
        optionals.set(1);
      }
      if (struct.isSetNatIpAddress()) {
        optionals.set(2);
      }
      if (struct.isSetPrivateIpAddress()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVpcId()) {
        oprot.writeString(struct.vpcId);
      }
      if (struct.isSetVSwitchId()) {
        oprot.writeString(struct.vSwitchId);
      }
      if (struct.isSetNatIpAddress()) {
        oprot.writeString(struct.natIpAddress);
      }
      if (struct.isSetPrivateIpAddress()) {
        {
          oprot.writeI32(struct.privateIpAddress.size());
          for (String _iter44 : struct.privateIpAddress)
          {
            oprot.writeString(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VpcAttributes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.vpcId = iprot.readString();
        struct.setVpcIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vSwitchId = iprot.readString();
        struct.setVSwitchIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.natIpAddress = iprot.readString();
        struct.setNatIpAddressIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.privateIpAddress = new ArrayList<String>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            String _elem47;
            _elem47 = iprot.readString();
            struct.privateIpAddress.add(_elem47);
          }
        }
        struct.setPrivateIpAddressIsSet(true);
      }
    }
  }

}

