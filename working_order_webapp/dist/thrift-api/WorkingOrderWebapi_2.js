//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

WorkingOrderWebapi_reqWorkingOrderInfo_args = function(args) {
  this.platformArgs = null;
  this.option = null;
  this.pageOption = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.option !== undefined) {
      this.option = args.option;
    }
    if (args.pageOption !== undefined) {
      this.pageOption = args.pageOption;
    }
  }
};
WorkingOrderWebapi_reqWorkingOrderInfo_args.prototype = {};
WorkingOrderWebapi_reqWorkingOrderInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.option = new ReqWorkingOrderWebInfoOption();
        this.option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageOption = new IndexedPageOption();
        this.pageOption.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkingOrderWebapi_reqWorkingOrderInfo_args.prototype.write = function(output) {
  output.writeStructBegin('WorkingOrderWebapi_reqWorkingOrderInfo_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.option !== null && this.option !== undefined) {
    output.writeFieldBegin('option', Thrift.Type.STRUCT, 2);
    this.option.write(output);
    output.writeFieldEnd();
  }
  if (this.pageOption !== null && this.pageOption !== undefined) {
    output.writeFieldBegin('pageOption', Thrift.Type.STRUCT, 3);
    this.pageOption.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkingOrderWebapi_reqWorkingOrderInfo_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
WorkingOrderWebapi_reqWorkingOrderInfo_result.prototype = {};
WorkingOrderWebapi_reqWorkingOrderInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AssetAccountWorkingOrderWebInfoPage();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkingOrderWebapi_reqWorkingOrderInfo_result.prototype.write = function(output) {
  output.writeStructBegin('WorkingOrderWebapi_reqWorkingOrderInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkingOrderWebapi_markWorkingOrderState_args = function(args) {
  this.platformArgs = null;
  this.workingOrderId = null;
  this.state = null;
  this.operateName = null;
  if (args) {
    if (args.platformArgs !== undefined) {
      this.platformArgs = args.platformArgs;
    }
    if (args.workingOrderId !== undefined) {
      this.workingOrderId = args.workingOrderId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.operateName !== undefined) {
      this.operateName = args.operateName;
    }
  }
};
WorkingOrderWebapi_markWorkingOrderState_args.prototype = {};
WorkingOrderWebapi_markWorkingOrderState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.platformArgs = new PlatformArgs();
        this.platformArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.workingOrderId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operateName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkingOrderWebapi_markWorkingOrderState_args.prototype.write = function(output) {
  output.writeStructBegin('WorkingOrderWebapi_markWorkingOrderState_args');
  if (this.platformArgs !== null && this.platformArgs !== undefined) {
    output.writeFieldBegin('platformArgs', Thrift.Type.STRUCT, 1);
    this.platformArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.workingOrderId !== null && this.workingOrderId !== undefined) {
    output.writeFieldBegin('workingOrderId', Thrift.Type.I64, 2);
    output.writeI64(this.workingOrderId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.operateName !== null && this.operateName !== undefined) {
    output.writeFieldBegin('operateName', Thrift.Type.STRING, 4);
    output.writeString(this.operateName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkingOrderWebapi_markWorkingOrderState_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof ErrorInfo) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
WorkingOrderWebapi_markWorkingOrderState_result.prototype = {};
WorkingOrderWebapi_markWorkingOrderState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OperateResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new ErrorInfo();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkingOrderWebapi_markWorkingOrderState_result.prototype.write = function(output) {
  output.writeStructBegin('WorkingOrderWebapi_markWorkingOrderState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WorkingOrderWebapiClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
WorkingOrderWebapiClient.prototype = {};
WorkingOrderWebapiClient.prototype.reqWorkingOrderInfo = function(platformArgs, option, pageOption) {
  this.send_reqWorkingOrderInfo(platformArgs, option, pageOption);
  return this.recv_reqWorkingOrderInfo();
};

WorkingOrderWebapiClient.prototype.send_reqWorkingOrderInfo = function(platformArgs, option, pageOption) {
  this.output.writeMessageBegin('reqWorkingOrderInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new WorkingOrderWebapi_reqWorkingOrderInfo_args();
  args.platformArgs = platformArgs;
  args.option = option;
  args.pageOption = pageOption;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

WorkingOrderWebapiClient.prototype.recv_reqWorkingOrderInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WorkingOrderWebapi_reqWorkingOrderInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reqWorkingOrderInfo failed: unknown result';
};
WorkingOrderWebapiClient.prototype.markWorkingOrderState = function(platformArgs, workingOrderId, state, operateName) {
  this.send_markWorkingOrderState(platformArgs, workingOrderId, state, operateName);
  return this.recv_markWorkingOrderState();
};

WorkingOrderWebapiClient.prototype.send_markWorkingOrderState = function(platformArgs, workingOrderId, state, operateName) {
  this.output.writeMessageBegin('markWorkingOrderState', Thrift.MessageType.CALL, this.seqid);
  var args = new WorkingOrderWebapi_markWorkingOrderState_args();
  args.platformArgs = platformArgs;
  args.workingOrderId = workingOrderId;
  args.state = state;
  args.operateName = operateName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

WorkingOrderWebapiClient.prototype.recv_markWorkingOrderState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new WorkingOrderWebapi_markWorkingOrderState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'markWorkingOrderState failed: unknown result';
};
