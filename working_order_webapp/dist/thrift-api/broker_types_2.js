//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


BrokerAccessStatus = {
'NEW' : 0,
'EDIT' : 1,
'VERIFIED_CORRECT' : 2,
'SYNCHRONIZED' : 3
};
BrokerAccessWorkingStatus = {
'NOT_WORKING' : 0,
'WORKING' : 1
};
TechPlatformEnv = {
'NONE' : 0,
'REAL' : 1,
'SIM' : 2
};
BrokerPlatform = {
'NONE' : 0,
'CTP' : 1,
'ESUNNY' : 2,
'SP' : 3,
'ESUNNY_3' : 4
};
BrokerErrorCode = {
'BROKER_NOT_FOUND' : 1000,
'BROKER_ENG_NAME_EXIST' : 1001,
'BROKER_CN_NAME_EXIST' : 1002,
'BROKER_ACCESS_NOT_VERIFIED' : 1003,
'BROKER_EXIST' : 1004,
'BROKER_ACCESS_EXIST' : 1005,
'BROKER_ACCESS_NOT_FOUND' : 1006,
'BROKER_ACCESS_BROKERID_NO_CHANGE' : 1007,
'BROKER_ACCESS_PLATFORM_NO_CHANGE' : 1008,
'BROKER_ACCESS_NOT_WORKING' : 1009,
'BROKER_ACCESS_WORKING' : 1010,
'BROKER_ACCESS_ADDRESS_ERROR' : 1011,
'BROKER_ACCESS_ADDRESS_PORT_ERROR' : 1012,
'BROKER_ACCESS_TECH_PLATFORM_MUST_SET' : 1013,
'BROKER_ACCESS_TRADE_ADDRESS_MUST_SET' : 1014,
'BROKER_ACCESS_TECH_PLATFORM_ENV_MUST_SET' : 1015,
'BROKER_ACCESS_MAPPING_FILE_MUST_SET' : 1016,
'BROKER_ACCESS_CUSTOM_INFO_MUST_SET' : 1017,
'BROKER_ACCESS_PLATFORM_ENV_NO_CHANGE' : 1018,
'BROKER_ACCESS_CUSTOM_INFO_NO_CHANGE' : 1019
};
AccessAddress = function(args) {
  this.address = null;
  this.port = null;
  if (args) {
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
AccessAddress.prototype = {};
AccessAddress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessAddress.prototype.write = function(output) {
  output.writeStructBegin('AccessAddress');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BrokerEntry = function(args) {
  this.brokerId = null;
  this.engName = null;
  this.cnName = null;
  this.note = null;
  this.techPlatformEnvs = null;
  this.techPlatforms = null;
  this.lastModityTimestamp = null;
  this.createTimestamp = null;
  if (args) {
    if (args.brokerId !== undefined) {
      this.brokerId = args.brokerId;
    }
    if (args.engName !== undefined) {
      this.engName = args.engName;
    }
    if (args.cnName !== undefined) {
      this.cnName = args.cnName;
    }
    if (args.note !== undefined) {
      this.note = args.note;
    }
    if (args.techPlatformEnvs !== undefined) {
      this.techPlatformEnvs = args.techPlatformEnvs;
    }
    if (args.techPlatforms !== undefined) {
      this.techPlatforms = args.techPlatforms;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
  }
};
BrokerEntry.prototype = {};
BrokerEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.brokerId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.engName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.note = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.techPlatformEnvs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.techPlatformEnvs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.techPlatforms = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI32().value;
          this.techPlatforms.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrokerEntry.prototype.write = function(output) {
  output.writeStructBegin('BrokerEntry');
  if (this.brokerId !== null && this.brokerId !== undefined) {
    output.writeFieldBegin('brokerId', Thrift.Type.I32, 1);
    output.writeI32(this.brokerId);
    output.writeFieldEnd();
  }
  if (this.engName !== null && this.engName !== undefined) {
    output.writeFieldBegin('engName', Thrift.Type.STRING, 2);
    output.writeString(this.engName);
    output.writeFieldEnd();
  }
  if (this.cnName !== null && this.cnName !== undefined) {
    output.writeFieldBegin('cnName', Thrift.Type.STRING, 3);
    output.writeString(this.cnName);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRING, 4);
    output.writeString(this.note);
    output.writeFieldEnd();
  }
  if (this.techPlatformEnvs !== null && this.techPlatformEnvs !== undefined) {
    output.writeFieldBegin('techPlatformEnvs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.techPlatformEnvs.length);
    for (var iter14 in this.techPlatformEnvs)
    {
      if (this.techPlatformEnvs.hasOwnProperty(iter14))
      {
        iter14 = this.techPlatformEnvs[iter14];
        output.writeI32(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.techPlatforms !== null && this.techPlatforms !== undefined) {
    output.writeFieldBegin('techPlatforms', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I32, this.techPlatforms.length);
    for (var iter15 in this.techPlatforms)
    {
      if (this.techPlatforms.hasOwnProperty(iter15))
      {
        iter15 = this.techPlatforms[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 6);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BrokerAccessEntry = function(args) {
  this.entryId = null;
  this.brokerId = null;
  this.platform = null;
  this.tradeAddresses = null;
  this.customInfoMap = null;
  this.status = null;
  this.lastModityTimestamp = null;
  this.createTimestamp = null;
  this.workingStatus = null;
  this.techPlatformEnv = null;
  this.accessName = null;
  this.quotaAddresses = null;
  if (args) {
    if (args.entryId !== undefined) {
      this.entryId = args.entryId;
    }
    if (args.brokerId !== undefined) {
      this.brokerId = args.brokerId;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.tradeAddresses !== undefined) {
      this.tradeAddresses = args.tradeAddresses;
    }
    if (args.customInfoMap !== undefined) {
      this.customInfoMap = args.customInfoMap;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.lastModityTimestamp !== undefined) {
      this.lastModityTimestamp = args.lastModityTimestamp;
    }
    if (args.createTimestamp !== undefined) {
      this.createTimestamp = args.createTimestamp;
    }
    if (args.workingStatus !== undefined) {
      this.workingStatus = args.workingStatus;
    }
    if (args.techPlatformEnv !== undefined) {
      this.techPlatformEnv = args.techPlatformEnv;
    }
    if (args.accessName !== undefined) {
      this.accessName = args.accessName;
    }
    if (args.quotaAddresses !== undefined) {
      this.quotaAddresses = args.quotaAddresses;
    }
  }
};
BrokerAccessEntry.prototype = {};
BrokerAccessEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.entryId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.brokerId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.tradeAddresses = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new AccessAddress();
          elem22.read(input);
          this.tradeAddresses.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.customInfoMap = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          if (_i28 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key29 = null;
          var val30 = null;
          key29 = input.readString().value;
          val30 = input.readString().value;
          this.customInfoMap[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModityTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.createTimestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.workingStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.techPlatformEnv = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.accessName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.quotaAddresses = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new AccessAddress();
          elem37.read(input);
          this.quotaAddresses.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BrokerAccessEntry.prototype.write = function(output) {
  output.writeStructBegin('BrokerAccessEntry');
  if (this.entryId !== null && this.entryId !== undefined) {
    output.writeFieldBegin('entryId', Thrift.Type.I32, 1);
    output.writeI32(this.entryId);
    output.writeFieldEnd();
  }
  if (this.brokerId !== null && this.brokerId !== undefined) {
    output.writeFieldBegin('brokerId', Thrift.Type.I32, 2);
    output.writeI32(this.brokerId);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 3);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.tradeAddresses !== null && this.tradeAddresses !== undefined) {
    output.writeFieldBegin('tradeAddresses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.tradeAddresses.length);
    for (var iter38 in this.tradeAddresses)
    {
      if (this.tradeAddresses.hasOwnProperty(iter38))
      {
        iter38 = this.tradeAddresses[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customInfoMap !== null && this.customInfoMap !== undefined) {
    output.writeFieldBegin('customInfoMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.customInfoMap));
    for (var kiter39 in this.customInfoMap)
    {
      if (this.customInfoMap.hasOwnProperty(kiter39))
      {
        var viter40 = this.customInfoMap[kiter39];
        output.writeString(kiter39);
        output.writeString(viter40);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 6);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.lastModityTimestamp !== null && this.lastModityTimestamp !== undefined) {
    output.writeFieldBegin('lastModityTimestamp', Thrift.Type.I64, 7);
    output.writeI64(this.lastModityTimestamp);
    output.writeFieldEnd();
  }
  if (this.createTimestamp !== null && this.createTimestamp !== undefined) {
    output.writeFieldBegin('createTimestamp', Thrift.Type.I64, 8);
    output.writeI64(this.createTimestamp);
    output.writeFieldEnd();
  }
  if (this.workingStatus !== null && this.workingStatus !== undefined) {
    output.writeFieldBegin('workingStatus', Thrift.Type.I32, 9);
    output.writeI32(this.workingStatus);
    output.writeFieldEnd();
  }
  if (this.techPlatformEnv !== null && this.techPlatformEnv !== undefined) {
    output.writeFieldBegin('techPlatformEnv', Thrift.Type.I32, 10);
    output.writeI32(this.techPlatformEnv);
    output.writeFieldEnd();
  }
  if (this.accessName !== null && this.accessName !== undefined) {
    output.writeFieldBegin('accessName', Thrift.Type.STRING, 11);
    output.writeString(this.accessName);
    output.writeFieldEnd();
  }
  if (this.quotaAddresses !== null && this.quotaAddresses !== undefined) {
    output.writeFieldBegin('quotaAddresses', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.quotaAddresses.length);
    for (var iter41 in this.quotaAddresses)
    {
      if (this.quotaAddresses.hasOwnProperty(iter41))
      {
        iter41 = this.quotaAddresses[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

