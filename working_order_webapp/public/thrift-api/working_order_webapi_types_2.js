//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


AssetAccountWorkingOrderWebInfo = function(args) {
  this.orderId = null;
  this.workingOrderInfo = null;
  this.userName = null;
  this.brokerEntry = null;
  this.brokerAccessEntry = null;
  this.companyCode = null;
  if (args) {
    if (args.orderId !== undefined) {
      this.orderId = args.orderId;
    }
    if (args.workingOrderInfo !== undefined) {
      this.workingOrderInfo = args.workingOrderInfo;
    }
    if (args.userName !== undefined) {
      this.userName = args.userName;
    }
    if (args.brokerEntry !== undefined) {
      this.brokerEntry = args.brokerEntry;
    }
    if (args.brokerAccessEntry !== undefined) {
      this.brokerAccessEntry = args.brokerAccessEntry;
    }
    if (args.companyCode !== undefined) {
      this.companyCode = args.companyCode;
    }
  }
};
AssetAccountWorkingOrderWebInfo.prototype = {};
AssetAccountWorkingOrderWebInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.orderId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.workingOrderInfo = new AssetAccountWorkingOrder();
        this.workingOrderInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.brokerEntry = new BrokerEntry();
        this.brokerEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.brokerAccessEntry = new BrokerAccessEntry();
        this.brokerAccessEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.companyCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssetAccountWorkingOrderWebInfo.prototype.write = function(output) {
  output.writeStructBegin('AssetAccountWorkingOrderWebInfo');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.I64, 1);
    output.writeI64(this.orderId);
    output.writeFieldEnd();
  }
  if (this.workingOrderInfo !== null && this.workingOrderInfo !== undefined) {
    output.writeFieldBegin('workingOrderInfo', Thrift.Type.STRUCT, 2);
    this.workingOrderInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 3);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.brokerEntry !== null && this.brokerEntry !== undefined) {
    output.writeFieldBegin('brokerEntry', Thrift.Type.STRUCT, 4);
    this.brokerEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.brokerAccessEntry !== null && this.brokerAccessEntry !== undefined) {
    output.writeFieldBegin('brokerAccessEntry', Thrift.Type.STRUCT, 5);
    this.brokerAccessEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.companyCode !== null && this.companyCode !== undefined) {
    output.writeFieldBegin('companyCode', Thrift.Type.STRING, 6);
    output.writeString(this.companyCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReqWorkingOrderWebInfoOption = function(args) {
  this.companyNamePartical = null;
  this.companyUserNamePartical = null;
  this.orderType = null;
  this.state = null;
  if (args) {
    if (args.companyNamePartical !== undefined) {
      this.companyNamePartical = args.companyNamePartical;
    }
    if (args.companyUserNamePartical !== undefined) {
      this.companyUserNamePartical = args.companyUserNamePartical;
    }
    if (args.orderType !== undefined) {
      this.orderType = args.orderType;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
ReqWorkingOrderWebInfoOption.prototype = {};
ReqWorkingOrderWebInfoOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.companyNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.companyUserNamePartical = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.orderType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReqWorkingOrderWebInfoOption.prototype.write = function(output) {
  output.writeStructBegin('ReqWorkingOrderWebInfoOption');
  if (this.companyNamePartical !== null && this.companyNamePartical !== undefined) {
    output.writeFieldBegin('companyNamePartical', Thrift.Type.STRING, 1);
    output.writeString(this.companyNamePartical);
    output.writeFieldEnd();
  }
  if (this.companyUserNamePartical !== null && this.companyUserNamePartical !== undefined) {
    output.writeFieldBegin('companyUserNamePartical', Thrift.Type.STRING, 2);
    output.writeString(this.companyUserNamePartical);
    output.writeFieldEnd();
  }
  if (this.orderType !== null && this.orderType !== undefined) {
    output.writeFieldBegin('orderType', Thrift.Type.I32, 3);
    output.writeI32(this.orderType);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 4);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AssetAccountWorkingOrderWebInfoPage = function(args) {
  this.total = null;
  this.page = null;
  if (args) {
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
AssetAccountWorkingOrderWebInfoPage.prototype = {};
AssetAccountWorkingOrderWebInfoPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.page = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new AssetAccountWorkingOrderWebInfo();
          elem6.read(input);
          this.page.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssetAccountWorkingOrderWebInfoPage.prototype.write = function(output) {
  output.writeStructBegin('AssetAccountWorkingOrderWebInfoPage');
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 1);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.page.length);
    for (var iter7 in this.page)
    {
      if (this.page.hasOwnProperty(iter7))
      {
        iter7 = this.page[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OperateResult = function(args) {
  this.success = null;
  this.code = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
OperateResult.prototype = {};
OperateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OperateResult.prototype.write = function(output) {
  output.writeStructBegin('OperateResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

